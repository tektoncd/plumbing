# Copyright 2019-2020 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
plank:
  job_url_template: 'https://tekton-releases.appspot.com/build/tekton-prow/{{if or (eq .Spec.Type "presubmit") (eq .Spec.Type "batch")}}pr-logs/pull{{with .Spec.Refs}}/{{.Org}}_{{.Repo}}{{end}}{{else}}logs{{end}}{{if eq .Spec.Type "presubmit"}}/{{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}{{else if eq .Spec.Type "batch"}}/batch{{end}}/{{.Spec.Job}}/{{.Status.BuildID}}/'
  report_template: '[Full PR test history](https://tekton-releases.appspot.com/pr/{{.Spec.Refs.Org}}_{{.Spec.Refs.Repo}}/{{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}). [Your PR dashboard](https://prow.tekton.dev/pr/{{with index .Spec.Refs.Pulls 0}}{{.Author}}{{end}}).'
  pod_pending_timeout: 60m
  default_decoration_config:
    timeout: 7200000000000 # 2h
    grace_period: 15000000000 # 15s
    utility_images:
      clonerefs: "gcr.io/k8s-prow/clonerefs:v20190731-e3f7b9853"
      initupload: "gcr.io/k8s-prow/initupload:v20190731-e3f7b9853"
      entrypoint: "gcr.io/k8s-prow/entrypoint:v20190731-e3f7b9853"
      sidecar: "gcr.io/k8s-prow/sidecar:v20190731-e3f7b9853"
    gcs_configuration:
      bucket: "tekton-prow"
      path_strategy: "explicit"
    gcs_credentials_secret: "test-account"
branch-protection:
  orgs:
    tektoncd:
      # Protect all branches in tekton
      # This means all prow jobs with "always_run" set are required
      # to pass before tide can merge the PR.
      # Currently this is manually enabled by the tekton org admins,
      # but it's stated here for documentation and reference purposes.
      protect: true
      # Admins can overrule checks
      enforce_admins: false
tide:
  queries:
  - repos:
    - tektoncd/catalog
    - tektoncd/catlin
    - tektoncd/chains
    - tektoncd/cli
    - tektoncd/community
    - tektoncd/dashboard
    - tektoncd/experimental
    - tektoncd/friends
    - tektoncd/hub
    - tektoncd/operator
    - tektoncd/pipeline
    - tektoncd/plumbing
    - tektoncd/resolution
    - tektoncd/results
    - tektoncd/triggers
    - tektoncd/website
    labels:
    - lgtm
    - approved
    missingLabels:
    - do-not-merge/hold
    - do-not-merge/invalid-owners-file
    - do-not-merge/release-note-label-needed
    - do-not-merge/requires-unreleased-pipelines
    - do-not-merge/work-in-progress
    - needs-ok-to-test
    - needs-rebase
  merge_method:
    tektoncd/catalog: rebase
    tektoncd/catlin: rebase
    tektoncd/chains: rebase
    tektoncd/cli: rebase
    tektoncd/community: rebase
    tektoncd/dashboard: rebase
    tektoncd/experimental: rebase
    tektoncd/friends: rebase
    tektoncd/hub: rebase
    tektoncd/operator: rebase
    tektoncd/pipeline: rebase
    tektoncd/plumbing: rebase
    tektoncd/resolution: rebase
    tektoncd/results: rebase
    tektoncd/triggers: rebase
    tektoncd/website: rebase
  target_url: https://prow.tekton.dev/tide

presets:
- labels:
    preset-presubmit-sh: "true"
  volumeMounts:
  - name: test-account
    mountPath: /etc/test-account
    readOnly: true
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/test-account/service-account.json
  - name: E2E_CLUSTER_REGION
    value: us-central1
  volumes:
  - name: test-account
    secret:
      secretName: test-account
- labels:
    preset-postsubmit-sh: "true"
  volumeMounts:
  - name: nightly-account
    mountPath: /etc/nightly-account
    readOnly: true
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/nightly-account/service-account.json
  volumes:
  # this secret/service-account has access to the tekton-nightly project, specifically make it possible to push
  # images to gcr.io/tekton-nightly ðŸ‘¼
  - name: nightly-account
    secret:
      secretName: nightly-account
- labels:
    preset-github-token: "true"
  volumeMounts:
  - name: github-token
    mountPath: /etc/github-token
    readOnly: true
  volumes:
  - name: github-token
    secret:
      secretName: oauth-token
# docker-in-docker (with images/bootstrap) preset
# NOTE: using this also requires using that image,
# ensuring you run your test under either the ENTRYPOINT or:
# /usr/local/bin/runner.sh my-test-command --foo --bar
# AND setting the following on your PodSpec:
# securityContext:
#   privileged: true
# These settings were taken from kubernetes/test-infra: https://github.com/kubernetes/test-infra/blob/aaf616ee940bcc64f775a77797fc80048df634b4/config/prow/config.yaml#L751
- labels:
    preset-dind-enabled: "true"
  env:
  - name: DOCKER_IN_DOCKER_ENABLED
    value: "true"
  volumes:
  # kubekins-e2e legacy path
  - name: docker-graph
    emptyDir: {}
  # krte (normal) path
  - name: docker-root
    emptyDir: {}
  volumeMounts:
  - name: docker-graph
    mountPath: /docker-graph
  - name: docker-root
    mountPath: /var/lib/docker
# volume mounts for kind
- labels:
    preset-kind-volume-mounts: "true"
  volumeMounts:
    - mountPath: /lib/modules
      name: modules
      readOnly: true
    - mountPath: /sys/fs/cgroup
      name: cgroup
  volumes:
    - name: modules
      hostPath:
        path: /lib/modules
        type: Directory
    - name: cgroup
      hostPath:
        path: /sys/fs/cgroup
        type: Directory

presubmits:
  tektoncd/plumbing:
  - name: pull-dogfooding-mario-test
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    decorate: true
    rerun_command: "/test pull-dogfooding-mario-test"
    trigger: "(?m)^/test pull-dogfooding-mario-test,?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:mario
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./tekton/images/test-runner/test.sh"
  - name: pull-tekton-plumbing-check-testgrid-config
    run_if_changed: '^(prow/.*\.yaml)|(testgrid/.*\.yaml)$'
    decorate: true
    annotations:
      testgrid-create-test-group: "false"
    labels:
      preset-presubmit-sh: "true"
    spec:
      containers:
      - image: gcr.io/k8s-prow/configurator:v20220412-66078146cd
        command:
        - configurator
        args:
        - --yaml=testgrid/config.yaml
        - --default=testgrid/default.yaml
        - --prow-config=prow/config.yaml
        - --prowjob-url-prefix=https://github.com/tektoncd/plumbing/tree/main/prow/
        - --update-description
        - --validate-config-file
        resources:
          requests:
            memory: "1Gi"
  tektoncd/catlin:
    - name: pull-tekton-catlin-build-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-catlin-build-tests"
      trigger: "(?m)^/test (all|pull-tekton-catlin-build-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--build-tests"
    - name: pull-tekton-catlin-unit-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-catlin-unit-tests"
      trigger: "(?m)^/test (all|pull-tekton-catlin-unit-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--unit-tests"
    - name: pull-tekton-catlin-integration-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-catlin-integration-tests"
      trigger: "(?m)^/test (all|pull-tekton-catlin-integration-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--integration-tests"
    - name: pull-tekton-catlin-go-coverage
      labels:
        preset-github-token: "true"
      agent: kubernetes
      always_run: true
      rerun_command: "/test pull-tekton-catlin-go-coverage"
      trigger: "(?m)^/test (all|pull-tekton-catlin-go-coverage),?(\\s+|$)"
      optional: true
      decorate: true
      clone_uri: "https://github.com/tektoncd/catlin.git"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/coverage:latest
          imagePullPolicy: Always
          command:
          - "/coverage"
          args:
          - "--postsubmit-gcs-bucket=tekton-prow"
          - "--postsubmit-job-name=post-tekton-catlin-go-coverage"
          - "--artifacts=$(ARTIFACTS)"
          - "--profile-name=coverage_profile.txt"
          - "--cov-target=."
          - "--cov-threshold-percentage=0"
          - "--github-token=/etc/github-token/oauth"
  tektoncd/chains:
    - name: pull-tekton-chains-build-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-chains-build-tests"
      trigger: "(?m)^/test (all|pull-tekton-chains-build-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang v1.17.8
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--build-tests"
    - name: pull-tekton-chains-unit-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-chains-unit-tests"
      trigger: "(?m)^/test (all|pull-tekton-chains-unit-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang v1.17.8
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--unit-tests"
    - name: pull-tekton-chains-integration-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-chains-integration-tests"
      trigger: "(?m)^/test (all|pull-tekton-chains-integration-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang v1.17.8
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--integration-tests"
    - name: pull-tekton-chains-go-coverage
      labels:
        preset-github-token: "true"
      agent: kubernetes
      always_run: true
      rerun_command: "/test pull-tekton-chains-go-coverage"
      trigger: "(?m)^/test (all|pull-tekton-chains-go-coverage),?(\\s+|$)"
      optional: true
      decorate: true
      clone_uri: "https://github.com/tektoncd/chains.git"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/coverage:latest
          imagePullPolicy: Always
          command:
          - "/coverage"
          args:
          - "--postsubmit-gcs-bucket=tekton-prow"
          - "--postsubmit-job-name=post-tekton-chains-go-coverage"
          - "--artifacts=$(ARTIFACTS)"
          - "--profile-name=coverage_profile.txt"
          - "--cov-target=."
          - "--cov-threshold-percentage=0"
          - "--github-token=/etc/github-token/oauth"

  tektoncd/cli:
  - name: pull-tekton-cli-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-cli-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-cli-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang v1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-cli-build-cross-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-cli-build-cross-tests"
    trigger: "(?m)^/test (all|pull-tekton-cli-build-cross-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang v1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-cross-tests"
  - name: pull-tekton-cli-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-cli-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-cli-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang v1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-cli-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-cli-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-cli-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang v1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
  tektoncd/dashboard:
  - name: pull-tekton-dashboard-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-dashboard-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-dashboard-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-dashboard-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test tekton-dashboard-unit-tests"
    trigger: "(?m)^/test (all|tekton-dashboard-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-dashboard-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-dashboard-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-dashboard-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
  tektoncd/experimental:
  - name: pull-tekton-experimental-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-experimental-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-experimental-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-experimental-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test tekton-experimental-unit-tests"
    trigger: "(?m)^/test (all|tekton-experimental-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-experimental-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-experimental-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-experimental-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        env:
        - name: DOCKER_IN_DOCKER_ENABLED
          value: "true"
  tektoncd/hub:
  - name: pull-tekton-hub-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-hub-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-hub-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-hub-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-hub-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-hub-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-hub-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-hub-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-hub-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
  tektoncd/operator:
  - name: pull-tekton-operator-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-operator-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-operator-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
        env:
        - name: DOCKER_IN_DOCKER_ENABLED
          value: "true"
        securityContext:
          privileged: true
  - name: pull-tekton-operator-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-operator-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-operator-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-operator-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-operator-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-operator-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
  - name: pull-tekton-operator-go-coverage
    labels:
      preset-github-token: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-operator-go-coverage"
    trigger: "(?m)^/test (all|pull-tekton-operator-go-coverage),?(\\s+|$)"
    optional: true
    clone_uri: "https://github.com/tektoncd/operator.git"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=tekton-prow"
        - "--postsubmit-job-name=post-tekton-operator-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=."
        - "--cov-threshold-percentage=0"
        - "--github-token=/etc/github-token/oauth"
  tektoncd/pipeline:
  - name: pull-tekton-pipeline-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-pipeline-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-pipeline-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-pipeline-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test tekton-pipeline-unit-tests"
    trigger: "(?m)^/test (all|tekton-pipeline-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-pipeline-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-pipeline-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-pipeline-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
  - name: pull-tekton-pipeline-alpha-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-pipeline-alpha-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-pipeline-alpha-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        env:
        - name: PIPELINE_FEATURE_GATE
          value: "alpha"
  - name: pull-tekton-pipeline-go-coverage
    labels:
      preset-github-token: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-pipeline-go-coverage"
    trigger: "(?m)^/test (all|pull-tekton-pipeline-go-coverage),?(\\s+|$)"
    optional: true
    clone_uri: "https://github.com/tektoncd/pipeline.git"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=tekton-prow"
        - "--postsubmit-job-name=post-tekton-pipeline-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=."
        - "--cov-threshold-percentage=0"
        - "--github-token=/etc/github-token/oauth"
  tektoncd/catalog:
  - name: pull-tekton-catalog-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-catalog-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-catalog-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-catalog-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-catalog-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-catalog-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-catalog-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-catalog-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-catalog-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
  tektoncd/resolution:
  - name: pull-tekton-resolution-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-resolution-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-resolution-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-resolution-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test tekton-resolution-unit-tests"
    trigger: "(?m)^/test (all|tekton-resolution-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-resolution-integration-tests
    labels:
      preset-presubmit-sh: "true"
      preset-dind-enabled: "true"
      preset-kind-volume-mounts: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-resolution-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-resolution-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        securityContext:
          privileged: true
  tektoncd/results:
  - name: pull-tekton-results-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-results-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-results-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-results-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test tekton-results-unit-tests"
    trigger: "(?m)^/test (all|tekton-results-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-results-integration-tests
    labels:
      preset-presubmit-sh: "true"
      preset-dind-enabled: "true"
      preset-kind-volume-mounts: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-results-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-results-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        securityContext:
          privileged: true
  tektoncd/triggers:
  - name: pull-tekton-triggers-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-triggers-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-triggers-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-triggers-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test tekton-triggers-unit-tests"
    trigger: "(?m)^/test (all|tekton-triggers-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-triggers-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-triggers-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-triggers-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220328-f43f43b3b2@sha256:0defd8e6bd59591a0a43fc1843ccc7cc6e67471821ec48b84e10818e0a0df464 # golang 1.17.8
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
  - name: pull-tekton-triggers-go-coverage
    labels:
      preset-github-token: "true"
    agent: kubernetes
    always_run: true
    rerun_command: "/test pull-tekton-triggers-go-coverage"
    trigger: "(?m)^/test (all|pull-tekton-triggers-go-coverage),?(\\s+|$)"
    optional: true
    decorate: true
    clone_uri: "https://github.com/tektoncd/triggers.git"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=tekton-prow"
        - "--postsubmit-job-name=post-tekton-triggers-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=."
        - "--cov-threshold-percentage=0"
        - "--github-token=/etc/github-token/oauth"

postsubmits:
  tektoncd/plumbing:
  - name: post-tekton-plumbing-upload-testgrid-config
    branches:
    - main
    agent: kubernetes
    decorate: true
    annotations:
      testgrid-create-test-group: "false"
    labels:
      preset-postsubmit-sh: "true"
    spec:
      containers:
      - image: gcr.io/k8s-prow/configurator:v20220412-66078146cd
        command:
        - configurator
        args:
        - --yaml=testgrid/config.yaml
        - --default=testgrid/default.yaml
        - --prow-config=prow/config.yaml
        - --prowjob-url-prefix=https://github.com/tektoncd/plumbing/tree/main/prow/
        - --update-description
        - --oneshot
        - --output=gs://tekton-prow/testgrid/config
        resources:
          requests:
            memory: "1Gi"
  tektoncd/catlin:
  - name: post-tekton-catlin-go-coverage
    branches:
    - main
    agent: kubernetes
    decorate: true
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--cov-threshold-percentage=0"
  tektoncd/chains:
  - name: post-tekton-chains-go-coverage
    branches:
    - main
    agent: kubernetes
    decorate: true
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--cov-threshold-percentage=0"
  tektoncd/operator:
  - name: post-tekton-operator-go-coverage
    branches:
    - main
    - main
    agent: kubernetes
    decorate: true
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--cov-threshold-percentage=0"
  tektoncd/pipeline:
  - name: post-tekton-pipeline-go-coverage
    branches:
    - main
    agent: kubernetes
    decorate: true
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--cov-threshold-percentage=0"
  tektoncd/triggers:
  - name: post-tekton-triggers-go-coverage
    branches:
    - main
    agent: kubernetes
    decorate: true
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--cov-threshold-percentage=0"

periodics:
- cron: "5 2 * * *"
  name: ci-tekton-pipeline-upgrade-tests
  labels:
    preset-presubmit-sh: "true"
  agent: kubernetes
  extra_refs:
  - org: tektoncd
    repo: pipeline
    base_ref: main
    path_alias: github.com/tektoncd/pipeline
  spec:
    containers:
    - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
      imagePullPolicy: Always
      command:
        - /usr/local/bin/entrypoint.sh
      args:
      - "--scenario=kubernetes_execute_bazel"
      - "--clean"
      - "--job=$(JOB_NAME)"
      - "--repo=github.com/tektoncd/pipeline=main"
      - "--root=/go/src"
      - "--service-account=/etc/test-account/service-account.json"
      - "--upload=gs://tekton-prow/pr-logs"
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "./test/e2e-tests-upgrade.sh"
- cron: "6 3 * * *"
  name: periodic-tekton-catalog-integration-tests
  labels:
    preset-presubmit-sh: "true"
  agent: kubernetes
  decorate: true
  extra_refs:
  - org: tektoncd
    repo: catalog
    base_ref: main
    path_alias: github.com/tektoncd/catalog
  spec:
    containers:
    - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
      imagePullPolicy: Always
      command:
      - /usr/local/bin/entrypoint.sh
      args:
      - "--scenario=kubernetes_execute_bazel"
      - "--clean"
      - "--job=$(JOB_NAME)"
      - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
      - "--root=/go/src"
      - "--service-account=/etc/test-account/service-account.json"
      - "--upload=gs://tekton-prow/pr-logs"
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "./test/presubmit-tests.sh"
      - "--integration-tests"
      env:
      - name: TEST_RUN_ALL_TESTS
        value: "true"
- name: periodic-tekton-stale
  labels:
    preset-github-token: "true"
  interval: 1h
  decorate: true
  spec:
    containers:
    - image: gcr.io/k8s-prow/commenter:v20211013-66c01a3f21
      command:
      - /app/robots/commenter/app.binary
      args:
      - |-
        --query=org:tektoncd
        -label:lifecycle/frozen
        -label:lifecycle/stale
        -label:lifecycle/rotten
      - --updated=2160h
      - --token=/etc/github-token/oauth
      - |-
        --comment=Issues go stale after 90d of inactivity.
        Mark the issue as fresh with `/remove-lifecycle stale` with a justification.
        Stale issues rot after an additional 30d of inactivity and eventually close.
        If this issue is safe to close now please do so with `/close` with a justification.
        If this issue should be exempted, mark the issue as frozen with `/lifecycle frozen` with a justification.

        /lifecycle stale

        Send feedback to [tektoncd/plumbing](https://github.com/tektoncd/plumbing).
      - --template
      - --ceiling=10
      - --confirm
- name: periodic-tekton-rotten
  labels:
    preset-github-token: "true"
  interval: 1h
  decorate: true
  spec:
    containers:
    - image: gcr.io/k8s-prow/commenter:v20211013-66c01a3f21
      command:
      - /app/robots/commenter/app.binary
      args:
      - |-
        --query=org:tektoncd
        -label:lifecycle/frozen
        label:lifecycle/stale
        -label:lifecycle/rotten
      - --updated=720h
      - --token=/etc/github-token/oauth
      - |-
        --comment=Stale issues rot after 30d of inactivity.
        Mark the issue as fresh with `/remove-lifecycle rotten` with a justification.
        Rotten issues close after an additional 30d of inactivity.
        If this issue is safe to close now please do so with `/close` with a justification.
        If this issue should be exempted, mark the issue as frozen with `/lifecycle frozen` with a justification.

        /lifecycle rotten

        Send feedback to [tektoncd/plumbing](https://github.com/tektoncd/plumbing).
      - --template
      - --ceiling=10
      - --confirm
- name: periodic-tekton-close
  labels:
    preset-github-token: "true"
  interval: 1h
  decorate: true
  spec:
    containers:
    - image: gcr.io/k8s-prow/commenter:v20211013-66c01a3f21
      command:
      - /app/robots/commenter/app.binary
      args:
      - |-
        --query=org:tektoncd
        -label:lifecycle/frozen
        -label:lifecycle/stale
        label:lifecycle/rotten
      - --updated=720h
      - --token=/etc/github-token/oauth
      - |-
        --comment=Rotten issues close after 30d of inactivity.
        Reopen the issue with `/reopen` with a justification.
        Mark the issue as fresh with `/remove-lifecycle rotten` with a justification.
        If this issue should be exempted, mark the issue as frozen with `/lifecycle frozen` with a justification.

        /close

        Send feedback to [tektoncd/plumbing](https://github.com/tektoncd/plumbing).
      - --template
      - --ceiling=10
      - --confirm
