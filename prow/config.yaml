# Copyright 2019-2020 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

prowjob_namespace: default
pod_namespace: test-pods

plank:
  job_url_template: 'https://prow.tekton.dev/view/gs/tekton-prow/{{if or (eq .Spec.Type "presubmit") (eq .Spec.Type "batch")}}pr-logs/pull{{with .Spec.Refs}}/{{.Org}}_{{.Repo}}{{end}}{{else}}logs{{end}}{{if eq .Spec.Type "presubmit"}}/{{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}{{else if eq .Spec.Type "batch"}}/batch{{end}}/{{.Spec.Job}}/{{.Status.BuildID}}/'
  report_templates:
    '*': '[Full PR test history](https://prow.tekton.dev/pr-history?org={{.Spec.Refs.Org}}&repo={{.Spec.Refs.Repo}}&pr={{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}). [Your PR dashboard](https://prow.tekton.dev/pr?query=is%3Apr%20state%3Aopen%20author%3A{{with index .Spec.Refs.Pulls 0}}{{.Author}}{{end}}).'
  job_url_prefix_config:
    '*': https://prow.tekton.dev/view/
  pod_pending_timeout: 60m
  pod_unscheduled_timeout: 5m
  default_decoration_configs:
    '*':
      timeout: 2h
      grace_period: 15s
      utility_images:
        clonerefs: "gcr.io/k8s-prow/clonerefs:v20220628-aa928caf31"
        initupload: "gcr.io/k8s-prow/initupload:v20220628-aa928caf31"
        entrypoint: "gcr.io/k8s-prow/entrypoint:v20220628-aa928caf31"
        sidecar: "gcr.io/k8s-prow/sidecar:v20220628-aa928caf31"
      gcs_configuration:
        bucket: "tekton-prow"
        path_strategy: "explicit"
        default_org: "tektoncd"
        default_repo: "pipeline"
      gcs_credentials_secret: "test-account"
      resources:
        clonerefs:
          requests:
            cpu: 100m
        initupload:
          requests:
            cpu: 100m
        place_entrypoint:
          requests:
            cpu: 100m
        sidecar:
          requests:
            cpu: 100m

branch-protection:
  orgs:
    tektoncd:
      # Protect all branches in tekton
      # This means all prow jobs with "always_run" set are required
      # to pass before tide can merge the PR.
      # Currently this is manually enabled by the tekton org admins,
      # but it's stated here for documentation and reference purposes.
      protect: true
      # Admins can overrule checks
      enforce_admins: false
      # Enforce EasyCLA for all repos
      required_status_checks:
        contexts:
        - EasyCLA
      repos:
        pipeline:
          required_status_checks:
            contexts:
            - check-pr-has-kind-label
    tektoncd-catalog:
      # Protect all branches in tektoncd-catalog
      # This means all prow jobs with "always_run" set are required
      # to pass before tide can merge the PR.
      # Currently this is manually enabled by the tekton org admins,
      # but it's stated here for documentation and reference purposes.
      protect: true
      # Admins can overrule checks
      enforce_admins: false
      # Enforce EasyCLA for all repos
      required_status_checks:
        contexts:
        - EasyCLA

sinker:
  resync_period: 1m
  max_prowjob_age: 48h
  terminated_pod_ttl: 30m
  max_pod_age: 3h

tide:
  sync_period: 2m
  queries:
  - repos:
    - tektoncd/ahmetb-gen-crd-api-reference-docs
    - tektoncd/catalog
    - tektoncd/catlin
    - tektoncd/chains
    - tektoncd/cli
    - tektoncd/community
    - tektoncd/dashboard
    - tektoncd/experimental
    - tektoncd/friends
    - tektoncd/hub
    - tektoncd/operator
    - tektoncd/pipeline
    - tektoncd/plumbing
    - tektoncd/resolution
    - tektoncd/results
    - tektoncd/triggers
    - tektoncd/website
    - tektoncd-catalog/golang
    labels:
    - lgtm
    - approved
    missingLabels:
    - do-not-merge/hold
    - do-not-merge/invalid-owners-file
    - do-not-merge/release-note-label-needed
    - do-not-merge/requires-unreleased-pipelines
    - do-not-merge/work-in-progress
    - needs-ok-to-test
    - needs-rebase
  merge_method:
    tektoncd/ahmetb-gen-crd-api-reference-docs: rebase
    tektoncd/catalog: rebase
    tektoncd/catlin: rebase
    tektoncd/chains: squash
    tektoncd/cli: rebase
    tektoncd/community: rebase
    tektoncd/dashboard: rebase
    tektoncd/experimental: rebase
    tektoncd/friends: rebase
    tektoncd/hub: rebase
    tektoncd/operator: rebase
    tektoncd/pipeline: rebase
    tektoncd/plumbing: rebase
    tektoncd/resolution: rebase
    tektoncd/results: rebase
    tektoncd/triggers: rebase
    tektoncd/website: rebase
    tektoncd-catalog/golang: rebase
  target_url: https://prow.tekton.dev/tide
  priority:
  - labels: ["kind/flake", "priority/critical-urgent"]
  - labels: ["kind/failing-test", "priority/critical-urgent"]
  - labels: ["kind/bug", "priority/critical-urgent"]
  pr_status_base_urls:
    '*': https://prow.tekton.dev/pr

deck:
  spyglass:
    size_limit: 200000000 # 200MB
    gcs_browser_prefix: https://gcsweb.k8s.io/gcs/
    testgrid_config: gs://tekton-prow/testgrid/config
    testgrid_root: https://testgrid.k8s.io/
    lenses:
    - lens:
        name: metadata
      required_files:
      - ^(?:started|finished)\.json$
      optional_files:
      - ^(?:podinfo|prowjob)\.json$
    - lens:
        name: buildlog
        config:
          highlighter:
            endpoint: http://halogen.default.svc.cluster.local
            pin: true
            auto: false
          highlight_regexes:
          - Automatic merge failed
          - cannot convert.+to type
          - "cannot use.+as.+(type|value)"
          - Cluster failed to initialize
          - cluster unreachable
          - "compilepkg: error"
          - configuration error
          - contact Google support
          - could not apply prowjob annotations
          - could not find the referenced.+TestGroup
          - could not write config
          - "couldn't load prow config:"
          - curl.+Failed to connect
          - DATA RACE
          - dirty working directory
          - ^E\d{4} \d\d:\d\d:\d\d\.\d+
          - "(Error|ERROR|error)s?:"
          - Error.+executing benchmarks
          - Expected.+got
          - FAILED. See logs
          - failed to acquire k8s binaries
          - failed to solve
          - (FAIL|Failure \[)\b
          - fatal error
          - flag provided but not defined
          - Full Stack Trace
          - got.+expected
          - hash mismatch
          - Hit an unsupported type
          - imported but not used
          - Incompatible changes
          - incorrect boilerplate
          - indent-error-flow
          - INSTALLATION FAILED
          - is a misspelling
          - LimitExceeded
          - "make:.+Error"
          - Master not detected
          - Merge conflict
          - not enough arguments in call
          - panic\b
          - Previous (write|read)
          - Process did not finish before.+timeout
          - race detected
          - security token.+invalid
          - "signal: killed"
          - Something went wrong
          - too few arguments
          - too many errors
          - "[Tt]imed out"
          - type.+has no field
          - unable to start the controlplane
          - "undefined:"
          - Unfortunately, an error
          - unused.+deadcode
          - "[Uu]nexpected error"
          - verify.+failed
          - want.+got
          - Your cluster may not be fully functional
          - ^\s+\^$
          - \[(0;)?31m
          - "^diff " # [+-]{3}\\s" has too much noise from go test output and set -x
          - â€¢ Failure
          # This highlights the start of bazel tests/runs to skip go importing noise.
          - "^INFO: Analyzed \\d+ targets"
      required_files:
        - ^.*build-log\.txt$
    - lens:
        name: junit
      required_files:
        - ^artifacts(/.*/|/)junit.*\.xml$ # https://regex101.com/r/vCSegS/1
    - lens:
        name: coverage
      required_files:
        - ^artifacts/filtered\.cov$
      optional_files:
        - ^artifacts/filtered\.html$
    - lens:
        name: podinfo
        config:
          runner_configs:
            "default":
              pod_link_template: "https://console.cloud.google.com/kubernetes/pod/us-central1-a/prow/test-pods/{{ .Name }}/details?project=tekton-releases"
      required_files:
        - ^podinfo\.json$
      optional_files:
        - ^prowjob\.json$
    - lens:
        name: links
      required_files:
        - artifacts/.*\.link\.txt
  tide_update_period: 1s

presets:
- labels:
    preset-presubmit-sh: "true"
  volumeMounts:
  - name: test-account
    mountPath: /etc/test-account
    readOnly: true
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/test-account/service-account.json
  - name: E2E_CLUSTER_REGION
    value: us-central1
  volumes:
  - name: test-account
    secret:
      secretName: test-account
- labels:
    preset-postsubmit-sh: "true"
  volumeMounts:
  - name: nightly-account
    mountPath: /etc/nightly-account
    readOnly: true
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/nightly-account/service-account.json
  volumes:
  # this secret/service-account has access to the tekton-nightly project, specifically make it possible to push
  # images to gcr.io/tekton-nightly ðŸ‘¼
  - name: nightly-account
    secret:
      secretName: nightly-account
- labels:
    preset-github-token: "true"
  volumeMounts:
  - name: github-token
    mountPath: /etc/github-token
    readOnly: true
  volumes:
  - name: github-token
    secret:
      secretName: oauth-token
# docker-in-docker (with images/bootstrap) preset
# NOTE: using this also requires using that image,
# ensuring you run your test under either the ENTRYPOINT or:
# /usr/local/bin/runner.sh my-test-command --foo --bar
# AND setting the following on your PodSpec:
# securityContext:
#   privileged: true
# These settings were taken from kubernetes/test-infra: https://github.com/kubernetes/test-infra/blob/aaf616ee940bcc64f775a77797fc80048df634b4/config/prow/config.yaml#L751
- labels:
    preset-dind-enabled: "true"
  env:
  - name: DOCKER_IN_DOCKER_ENABLED
    value: "true"
  volumes:
  # kubekins-e2e legacy path
  - name: docker-graph
    emptyDir: {}
  # krte (normal) path
  - name: docker-root
    emptyDir: {}
  volumeMounts:
  - name: docker-graph
    mountPath: /docker-graph
  - name: docker-root
    mountPath: /var/lib/docker
# volume mounts for kind
- labels:
    preset-kind-volume-mounts: "true"
  volumeMounts:
    - mountPath: /lib/modules
      name: modules
      readOnly: true
    - mountPath: /sys/fs/cgroup
      name: cgroup
  volumes:
    - name: modules
      hostPath:
        path: /lib/modules
        type: Directory
    - name: cgroup
      hostPath:
        path: /sys/fs/cgroup
        type: Directory

presubmits:
  tektoncd/plumbing:
  - name: pull-dogfooding-mario-test
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    decorate: true
    rerun_command: "/test pull-dogfooding-mario-test"
    trigger: "(?m)^/test pull-dogfooding-mario-test,?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:mario
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./tekton/images/test-runner/test.sh"
  - name: pull-tekton-plumbing-check-testgrid-config
    run_if_changed: '^(prow/.*\.yaml)|(testgrid/.*\.yaml)$'
    decorate: true
    annotations:
      testgrid-create-test-group: "false"
    labels:
      preset-presubmit-sh: "true"
    spec:
      containers:
      - image: gcr.io/k8s-prow/configurator:v20220412-66078146cd
        command:
        - configurator
        args:
        - --yaml=testgrid/config.yaml
        - --default=testgrid/default.yaml
        - --prow-config=prow/config.yaml
        - --prowjob-url-prefix=https://github.com/tektoncd/plumbing/tree/main/prow/
        - --update-description
        - --validate-config-file
        resources:
          requests:
            memory: "1Gi"
  tektoncd/catlin:
    - name: pull-tekton-catlin-build-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-catlin-build-tests"
      trigger: "(?m)^/test (all|pull-tekton-catlin-build-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--build-tests"
    - name: pull-tekton-catlin-unit-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-catlin-unit-tests"
      trigger: "(?m)^/test (all|pull-tekton-catlin-unit-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--unit-tests"
    - name: pull-tekton-catlin-integration-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-catlin-integration-tests"
      trigger: "(?m)^/test (all|pull-tekton-catlin-integration-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--integration-tests"
    - name: pull-tekton-catlin-go-coverage
      labels:
        preset-github-token: "true"
      agent: kubernetes
      always_run: true
      rerun_command: "/test pull-tekton-catlin-go-coverage"
      trigger: "(?m)^/test (all|pull-tekton-catlin-go-coverage),?(\\s+|$)"
      optional: true
      decorate: true
      clone_uri: "https://github.com/tektoncd/catlin.git"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/coverage:latest
          imagePullPolicy: Always
          command:
          - "/coverage"
          args:
          - "--postsubmit-gcs-bucket=tekton-prow"
          - "--postsubmit-job-name=post-tekton-catlin-go-coverage"
          - "--artifacts=$(ARTIFACTS)"
          - "--profile-name=coverage_profile.txt"
          - "--cov-target=."
          - "--cov-threshold-percentage=0"
          - "--github-token=/etc/github-token/oauth"
  tektoncd/chains:
    - name: pull-tekton-chains-build-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-chains-build-tests"
      trigger: "(?m)^/test (all|pull-tekton-chains-build-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--build-tests"
          resources:
            requests:
              cpu: 2000m
              memory: 4Gi
            limits:
              cpu: 4000m
              memory: 8Gi
    - name: pull-tekton-chains-unit-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-chains-unit-tests"
      trigger: "(?m)^/test (all|pull-tekton-chains-unit-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--unit-tests"
          resources:
            requests:
              cpu: 2000m
              memory: 4Gi
            limits:
              cpu: 4000m
              memory: 8Gi
    - name: pull-tekton-chains-integration-tests
      labels:
        preset-presubmit-sh: "true"
      agent: kubernetes
      always_run: true
      decorate: true
      rerun_command: "/test pull-tekton-chains-integration-tests"
      trigger: "(?m)^/test (all|pull-tekton-chains-integration-tests),?(\\s+|$)"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
          imagePullPolicy: Always
          command:
          - /usr/local/bin/entrypoint.sh
          args:
          - "--scenario=kubernetes_execute_bazel"
          - "--clean"
          - "--job=$(JOB_NAME)"
          - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
          - "--root=/go/src"
          - "--service-account=/etc/test-account/service-account.json"
          - "--upload=gs://tekton-prow/pr-logs"
          - "--" # end bootstrap args, scenario args below
          - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
          - "./test/presubmit-tests.sh"
          - "--integration-tests"
          resources:
            requests:
              cpu: 2000m
              memory: 4Gi
            limits:
              cpu: 4000m
              memory: 8Gi
    - name: pull-tekton-chains-go-coverage
      labels:
        preset-github-token: "true"
      agent: kubernetes
      always_run: true
      rerun_command: "/test pull-tekton-chains-go-coverage"
      trigger: "(?m)^/test (all|pull-tekton-chains-go-coverage),?(\\s+|$)"
      optional: true
      decorate: true
      clone_uri: "https://github.com/tektoncd/chains.git"
      spec:
        containers:
        - image: gcr.io/tekton-releases/dogfooding/coverage:latest
          imagePullPolicy: Always
          command:
          - "/coverage"
          args:
          - "--postsubmit-gcs-bucket=tekton-prow"
          - "--postsubmit-job-name=post-tekton-chains-go-coverage"
          - "--artifacts=$(ARTIFACTS)"
          - "--profile-name=coverage_profile.txt"
          - "--cov-target=."
          - "--cov-threshold-percentage=0"
          - "--github-token=/etc/github-token/oauth"
          resources:
            requests:
              cpu: 2000m
              memory: 4Gi
            limits:
              cpu: 4000m
              memory: 8Gi

  tektoncd/cli:
  - name: pull-tekton-cli-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-cli-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-cli-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 4000m
            memory: 8Gi
  - name: pull-tekton-cli-build-cross-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-cli-build-cross-tests"
    trigger: "(?m)^/test (all|pull-tekton-cli-build-cross-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-cross-tests"
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 4000m
            memory: 8Gi
  - name: pull-tekton-cli-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-cli-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-cli-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 4000m
            memory: 8Gi
  - name: pull-tekton-cli-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-cli-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-cli-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 4000m
            memory: 8Gi
  tektoncd/dashboard:
  - name: pull-tekton-dashboard-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-dashboard-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-dashboard-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-dashboard-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-dashboard-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-dashboard-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-dashboard-integration-tests
    labels:
      preset-presubmit-sh: "true"
      preset-dind-enabled: "true"
      preset-kind-volume-mounts: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-dashboard-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-dashboard-integration-tests),?(\\s+|$)"
    spec:
      nodeSelector:
        cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
        cloud.google.com/gke-nodepool: n2-standard-4-kind
      tolerations:
        - key: kind-only
          operator: Equal
          value: "true"
          effect: NoSchedule
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--service-account=/etc/test-account/service-account.json"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "/usr/local/bin/kind-e2e"
        - "--k8s-version"
        - "v1.25.x"
        - "--nodes"
        - "3"
        - "--e2e-script"
        - "./test/e2e-tests-prow.sh"
        - "--e2e-env"
        - "./test/e2e-tests-kind-prow.env"
        securityContext:
          privileged: true
        resources:
          requests:
            cpu: 3500m
            memory: 4Gi
          limits:
            cpu: 3500m
            memory: 8Gi
  tektoncd/experimental:
  - name: pull-tekton-experimental-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-experimental-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-experimental-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-experimental-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-experimental-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-experimental-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-experimental-integration-tests
    labels:
      preset-presubmit-sh: "true"
      preset-dind-enabled: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-experimental-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-experimental-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
  tektoncd/hub:
  - name: pull-tekton-hub-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-hub-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-hub-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:98b6252cb90293d9c0459ead56e49285c1470e7434ff8af492decc7de50d6f7f # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-hub-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-hub-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-hub-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:98b6252cb90293d9c0459ead56e49285c1470e7434ff8af492decc7de50d6f7f # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-hub-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-hub-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-hub-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:98b6252cb90293d9c0459ead56e49285c1470e7434ff8af492decc7de50d6f7f # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
  tektoncd/operator:
  - name: pull-tekton-operator-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-operator-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-operator-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 4000m
            memory: 8Gi
  - name: pull-tekton-operator-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-operator-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-operator-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 4000m
            memory: 8Gi
  - name: pull-tekton-operator-integration-tests
    labels:
      preset-presubmit-sh: "true"
      preset-dind-enabled: "true"
      preset-kind-volume-mounts: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-operator-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-operator-integration-tests),?(\\s+|$)"
    spec:
      nodeSelector:
        cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
        cloud.google.com/gke-nodepool: n2-standard-4-kind
      tolerations:
        - key: kind-only
          operator: Equal
          value: "true"
          effect: NoSchedule
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:bc9ad50aa7a1fef839543b282d7058f9505349637169d2e1d01771a574181070 # golang 1.20
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--service-account=/etc/test-account/service-account.json"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "/usr/local/bin/kind-e2e"
        - "--k8s-version"
        - "v1.25.x"
        - "--nodes"
        - "3"
        - "--e2e-script"
        - "./test/e2e-tests.sh"
        - "--e2e-env"
        - "./test/e2e-tests-kind-prow.env"
        securityContext:
          privileged: true
        resources:
          requests:
            cpu: 3500m
            memory: 4Gi
          limits:
            cpu: 3500m
            memory: 8Gi
  - name: pull-tekton-operator-go-coverage
    labels:
      preset-github-token: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-operator-go-coverage"
    trigger: "(?m)^/test (all|pull-tekton-operator-go-coverage),?(\\s+|$)"
    optional: true
    clone_uri: "https://github.com/tektoncd/operator.git"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=tekton-prow"
        - "--postsubmit-job-name=post-tekton-operator-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=."
        - "--cov-threshold-percentage=0"
        - "--github-token=/etc/github-token/oauth"
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 4000m
            memory: 8Gi
  tektoncd/pipeline:
  - name: pull-tekton-pipeline-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-pipeline-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-pipeline-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
        resources:
          requests:
            cpu: 8000m
            memory: 4Gi
          limits:
            cpu: 8000m
            memory: 8Gi
  - name: pull-tekton-pipeline-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-pipeline-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-pipeline-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 4000m
            memory: 8Gi
  - name: pull-tekton-pipeline-go-coverage
    labels:
      preset-github-token: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-pipeline-go-coverage"
    trigger: "(?m)^/test (all|pull-tekton-pipeline-go-coverage),?(\\s+|$)"
    optional: true
    clone_uri: "https://github.com/tektoncd/pipeline.git"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=tekton-prow"
        - "--postsubmit-job-name=post-tekton-pipeline-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=."
        - "--cov-threshold-percentage=0"
        - "--github-token=/etc/github-token/oauth"
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 4000m
            memory: 8Gi
  - name: pull-tekton-pipeline-integration-tests
    labels:
      preset-presubmit-sh: "true"
      preset-dind-enabled: "true"
      preset-kind-volume-mounts: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-pipeline-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-pipeline-integration-tests),?(\\s+|$)"
    spec:
      nodeSelector:
        cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
        cloud.google.com/gke-nodepool: n2-standard-4-kind
      tolerations:
        - key: kind-only
          operator: Equal
          value: "true"
          effect: NoSchedule
      containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:11dc05cf6e81786ce5935e43aad29a84d6b662804cb57f740c9fb3e1e73ff5f7 # golang 1.19
          imagePullPolicy: Always
          command:
            - /usr/local/bin/entrypoint.sh
          args:
            - "--service-account=/etc/test-account/service-account.json"
            - "--" # end bootstrap args, scenario args below
            - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
            - "/usr/local/bin/kind-e2e"
            - "--k8s-version"
            - "v1.25.x"
            - "--nodes"
            - "3"
            - "--e2e-script"
            - "./test/e2e-tests.sh"
            - --e2e-env
            - "./test/e2e-tests-kind-prow.env"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 3500m
              memory: 4Gi
            limits:
              cpu: 3500m
              memory: 8Gi
  - name: pull-tekton-pipeline-alpha-integration-tests
    labels:
      preset-presubmit-sh: "true"
      preset-dind-enabled: "true"
      preset-kind-volume-mounts: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-pipeline-alpha-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-pipeline-alpha-integration-tests),?(\\s+|$)"
    spec:
      nodeSelector:
        cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
        cloud.google.com/gke-nodepool: n2-standard-4-kind
      tolerations:
        - key: kind-only
          operator: Equal
          value: "true"
          effect: NoSchedule
      containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:11dc05cf6e81786ce5935e43aad29a84d6b662804cb57f740c9fb3e1e73ff5f7 # golang 1.19
          imagePullPolicy: Always
          command:
            - /usr/local/bin/entrypoint.sh
          args:
            - "--service-account=/etc/test-account/service-account.json"
            - "--" # end bootstrap args, scenario args below
            - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
            - "/usr/local/bin/kind-e2e"
            - "--k8s-version"
            - "v1.25.x"
            - "--nodes"
            - "3"
            - "--e2e-script"
            - "./test/e2e-tests.sh"
            - --e2e-env
            - "./test/e2e-tests-kind-prow-alpha.env"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 3500m
              memory: 4Gi
            limits:
              cpu: 3500m
              memory: 8Gi
          env:
            - name: PIPELINE_FEATURE_GATE
              value: "alpha"
  - name: pull-tekton-pipeline-beta-integration-tests
    labels:
      preset-presubmit-sh: "true"
      preset-dind-enabled: "true"
      preset-kind-volume-mounts: "true"
      pipeline-kind-e2e: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-pipeline-beta-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-pipeline-beta-integration-tests),?(\\s+|$)"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: pipeline-kind-e2e
                    operator: Exists
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
        cloud.google.com/gke-nodepool: n2-standard-4-kind
      tolerations:
        - key: kind-only
          operator: Equal
          value: "true"
          effect: NoSchedule
      containers:
        - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:11dc05cf6e81786ce5935e43aad29a84d6b662804cb57f740c9fb3e1e73ff5f7 # golang 1.19
          imagePullPolicy: Always
          command:
            - /usr/local/bin/entrypoint.sh
          args:
            - "--service-account=/etc/test-account/service-account.json"
            - "--" # end bootstrap args, scenario args below
            - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
            - "/usr/local/bin/kind-e2e"
            - "--k8s-version"
            - "v1.25.x"
            - "--nodes"
            - "3"
            - "--e2e-script"
            - "./test/e2e-tests.sh"
            - --e2e-env
            - "./test/e2e-tests-kind-prow-beta.env"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 3500m
              memory: 4Gi
            limits:
              cpu: 3500m
              memory: 8Gi
  tektoncd/catalog:
  - name: pull-tekton-catalog-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-catalog-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-catalog-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-catalog-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-catalog-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-catalog-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220316-golang-v1-16
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-catalog-integration-tests
    labels:
      preset-presubmit-sh: "true"
      preset-dind-enabled: "true"
      preset-kind-volume-mounts: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-catalog-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-catalog-integration-tests),?(\\s+|$)"
    spec:
      nodeSelector:
        cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
        cloud.google.com/gke-nodepool: n2-standard-4-kind
      tolerations:
        - key: kind-only
          operator: Equal
          value: "true"
          effect: NoSchedule
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:11dc05cf6e81786ce5935e43aad29a84d6b662804cb57f740c9fb3e1e73ff5f7
        imagePullPolicy: Always
        securityContext:
          privileged: true
        resources:
          requests:
            cpu: 3500m
            memory: 4Gi
          limits:
            cpu: 3500m
            memory: 8Gi
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--service-account=/etc/test-account/service-account.json"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "/usr/local/bin/kind-e2e"
        - "--k8s-version"
        - "v1.25.x"
        - "--nodes"
        - "3"
        - "--e2e-script"
        - "./test/e2e-tests.sh"
        - "--e2e-env"
        - "./test/e2e-tests-kind-prow.env"
  tektoncd/resolution:
  - name: pull-tekton-resolution-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-resolution-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-resolution-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-resolution-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-resolution-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-resolution-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-resolution-integration-tests
    labels:
      preset-presubmit-sh: "true"
      preset-dind-enabled: "true"
      preset-kind-volume-mounts: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-resolution-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-resolution-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        securityContext:
          privileged: true
  tektoncd/results:
  - name: pull-tekton-results-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-results-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-results-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-results-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-results-unit-tests"
    trigger: "(?m)^/test (all|pull-tekton-results-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-results-integration-tests
    labels:
      preset-presubmit-sh: "true"
      preset-dind-enabled: "true"
      preset-kind-volume-mounts: "true"
      pipeline-kind-e2e: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-results-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-results-integration-tests),?(\\s+|$)"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: pipeline-kind-e2e
                    operator: Exists
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
        cloud.google.com/gke-nodepool: n2-standard-4-kind
      tolerations:
        - key: kind-only
          operator: Equal
          value: "true"
          effect: NoSchedule
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--service-account=/etc/test-account/service-account.json"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        securityContext:
          privileged: true
        resources:
            requests:
              cpu: 3500m
              memory: 4Gi
            limits:
              cpu: 3500m
              memory: 8Gi
  - name: pull-tekton-results-go-coverage
    labels:
      preset-github-token: "true"
    agent: kubernetes
    always_run: true
    rerun_command: "/test pull-tekton-results-go-coverage"
    trigger: "(?m)^/test (all|pull-tekton-results-go-coverage),?(\\s+|$)"
    optional: true
    decorate: true
    clone_uri: "https://github.com/tektoncd/results.git"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=tekton-prow"
        - "--postsubmit-job-name=post-tekton-results-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=."
        - "--cov-threshold-percentage=0"
        - "--github-token=/etc/github-token/oauth"
  tektoncd/triggers:
  - name: pull-tekton-triggers-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-triggers-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-triggers-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
  - name: pull-tekton-triggers-unit-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test tekton-triggers-unit-tests"
    trigger: "(?m)^/test (all|tekton-triggers-unit-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
  - name: pull-tekton-triggers-integration-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-triggers-integration-tests"
    trigger: "(?m)^/test (all|pull-tekton-triggers-integration-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:5e5c4b04b7e7459f306eb0b8424495652b034b4b06a9e9ea7b0fe22282fd11af # golang 1.19
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
  - name: pull-tekton-triggers-go-coverage
    labels:
      preset-github-token: "true"
    agent: kubernetes
    always_run: true
    rerun_command: "/test pull-tekton-triggers-go-coverage"
    trigger: "(?m)^/test (all|pull-tekton-triggers-go-coverage),?(\\s+|$)"
    optional: true
    decorate: true
    clone_uri: "https://github.com/tektoncd/triggers.git"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=tekton-prow"
        - "--postsubmit-job-name=post-tekton-triggers-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=."
        - "--cov-threshold-percentage=0"
        - "--github-token=/etc/github-token/oauth"
  tektoncd/ahmetb-gen-crd-api-reference-docs:
  - name: pull-tekton-gen-crd-api-reference-docs-build-tests
    labels:
      preset-presubmit-sh: "true"
    agent: kubernetes
    always_run: true
    decorate: true
    rerun_command: "/test pull-tekton-gen-crd-api-reference-docs-build-tests"
    trigger: "(?m)^/test (all|pull-tekton-gen-crd-api-reference-docs-build-tests),?(\\s+|$)"
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/test-runner:v20220721-5c0e8e0e7a@sha256:8680f99c4d068ef3eb2512d9d3a153049b40f719454e21dfa4aaf691d7de4db5 # golang 1.18.3
        imagePullPolicy: Always
        command:
        - /usr/local/bin/entrypoint.sh
        args:
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/test-account/service-account.json"
        - "--upload=gs://tekton-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"

postsubmits:
  tektoncd/plumbing:
  - name: post-tekton-plumbing-upload-testgrid-config
    branches:
    - main
    agent: kubernetes
    decorate: true
    annotations:
      testgrid-create-test-group: "false"
    labels:
      preset-postsubmit-sh: "true"
    spec:
      containers:
      - image: gcr.io/k8s-prow/configurator:v20220412-66078146cd
        command:
        - configurator
        args:
        - --yaml=testgrid/config.yaml
        - --default=testgrid/default.yaml
        - --prow-config=prow/config.yaml
        - --prowjob-url-prefix=https://github.com/tektoncd/plumbing/tree/main/prow/
        - --update-description
        - --oneshot
        - --output=gs://tekton-prow/testgrid/config
        resources:
          requests:
            memory: "1Gi"
  tektoncd/catlin:
  - name: post-tekton-catlin-go-coverage
    branches:
    - main
    agent: kubernetes
    decorate: true
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--cov-threshold-percentage=0"
  tektoncd/chains:
  - name: post-tekton-chains-go-coverage
    branches:
    - main
    agent: kubernetes
    decorate: true
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--cov-threshold-percentage=0"
  tektoncd/operator:
  - name: post-tekton-operator-go-coverage
    branches:
    - main
    - main
    agent: kubernetes
    decorate: true
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--cov-threshold-percentage=0"
  tektoncd/pipeline:
  - name: post-tekton-pipeline-go-coverage
    branches:
    - main
    agent: kubernetes
    decorate: true
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--cov-threshold-percentage=0"
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 4000m
            memory: 8Gi
  tektoncd/triggers:
  - name: post-tekton-triggers-go-coverage
    branches:
    - main
    agent: kubernetes
    decorate: true
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--cov-threshold-percentage=0"
  tektoncd/results:
  - name: post-tekton-results-go-coverage
    branches:
    - main
    agent: kubernetes
    decorate: true
    spec:
      containers:
      - image: gcr.io/tekton-releases/dogfooding/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--cov-threshold-percentage=0"
periodics:
- cron: "5 2 * * *"
  name: ci-tekton-pipeline-upgrade-tests
  labels:
    preset-presubmit-sh: "true"
    preset-dind-enabled: "true"
    preset-kind-volume-mounts: "true"
  agent: kubernetes
  decorate: true
  extra_refs:
  - org: tektoncd
    repo: pipeline
    base_ref: main
    path_alias: github.com/tektoncd/pipeline
  spec:
    nodeSelector:
      cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
      cloud.google.com/gke-nodepool: n2-standard-4-kind
    tolerations:
      - key: kind-only
        operator: Equal
        value: "true"
        effect: NoSchedule
    containers:
    - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:11dc05cf6e81786ce5935e43aad29a84d6b662804cb57f740c9fb3e1e73ff5f7 # golang 1.19
      imagePullPolicy: Always
      command:
        - /usr/local/bin/entrypoint.sh
      args:
      - "--service-account=/etc/test-account/service-account.json"
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "/usr/local/bin/kind-e2e"
      - "--k8s-version"
      - "v1.25.x"
      - "--nodes"
      - "3"
      - "--e2e-script"
      - "./test/e2e-tests-upgrade.sh"
      - "--e2e-env"
      - "./test/e2e-tests-kind-prow.env"
      securityContext:
        privileged: true
      resources:
        requests:
          cpu: 3500m
          memory: 4Gi
        limits:
          cpu: 3500m
          memory: 8Gi
      env:
      - name: SKIP_INITIALIZE
        value: "true"
- cron: "6 3 * * *"
  name: periodic-tekton-catalog-integration-tests
  labels:
    preset-presubmit-sh: "true"
    preset-dind-enabled: "true"
    preset-kind-volume-mounts: "true"
  agent: kubernetes
  decorate: true
  extra_refs:
  - org: tektoncd
    repo: catalog
    base_ref: main
    path_alias: github.com/tektoncd/catalog
  spec:
    nodeSelector:
      cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
      cloud.google.com/gke-nodepool: n2-standard-4-kind
    tolerations:
    - key: kind-only
      operator: Equal
      value: "true"
      effect: NoSchedule
    containers:
    - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:11dc05cf6e81786ce5935e43aad29a84d6b662804cb57f740c9fb3e1e73ff5f7 # golang 1.19
      imagePullPolicy: Always
      securityContext:
        privileged: true
      resources:
        requests:
          cpu: 3500m
          memory: 4Gi
        limits:
          cpu: 3500m
          memory: 8Gi
      command:
      - /usr/local/bin/entrypoint.sh
      args:
      - "--service-account=/etc/test-account/service-account.json"
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "/usr/local/bin/kind-e2e"
      - "--k8s-version"
      - "v1.25.x"
      - "--nodes"
      - "3"
      - "--e2e-script"
      - "./test/e2e-tests.sh"
      - "--e2e-env"
      - "./test/e2e-tests-kind-prow.env"
      env:
      - name: TEST_RUN_ALL_TESTS
        value: "true"
- cron: "6 4 * * *"
  name: ci-tekton-pipeline-feature-flag-tests
  labels:
    preset-presubmit-sh: "true"
    preset-dind-enabled: "true"
    preset-kind-volume-mounts: "true"
  agent: kubernetes
  decorate: true
  extra_refs:
  - org: tektoncd
    repo: pipeline
    base_ref: main
    path_alias: github.com/tektoncd/pipeline
  spec:
    nodeSelector:
      cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
      cloud.google.com/gke-nodepool: n2-standard-4-kind
    tolerations:
      - key: kind-only
        operator: Equal
        value: "true"
        effect: NoSchedule
    containers:
    - image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:11dc05cf6e81786ce5935e43aad29a84d6b662804cb57f740c9fb3e1e73ff5f7 # golang 1.19
      imagePullPolicy: Always
      command:
        - /usr/local/bin/entrypoint.sh
      args:
      - "--service-account=/etc/test-account/service-account.json"
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "/usr/local/bin/kind-e2e"
      - "--k8s-version"
      - "v1.25.x"
      - "--nodes"
      - "3"
      - "--e2e-script"
      - "./test/e2e-tests.sh"
      - "--e2e-env"
      - "./test/e2e-tests-kind-prow.env"
      securityContext:
        privileged: true
      resources:
        requests:
          cpu: 3500m
          memory: 4Gi
        limits:
          cpu: 3500m
          memory: 8Gi
      env:
      - name: RUN_FEATUREFLAG_TESTS
        value: "true"
      - name: E2E_GO_TEST_TIMEOUT
        value: "60m"
