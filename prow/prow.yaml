# Copyright 2019-2020 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: prowjobs.prow.k8s.io
spec:
  group: prow.k8s.io
  version: v1
  names:
    kind: ProwJob
    singular: prowjob
    plural: prowjobs
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            max_concurrency:
              type: integer
              minimum: 0
            type:
              type: string
              enum:
              - "presubmit"
              - "postsubmit"
              - "periodic"
              - "batch"
        status:
          properties:
            state:
              type: string
              enum:
              - "triggered"
              - "pending"
              - "success"
              - "failure"
              - "aborted"
              - "error"
          anyOf:
          - not:
              properties:
                state:
                  type: string
                  enum:
                  - "success"
                  - "failure"
                  - "error"
                  - "aborted"
          - required:
            - completionTime
  additionalPrinterColumns:
  - name: Job
    type: string
    description: The name of the job being run.
    JSONPath: .spec.job
  - name: BuildId
    type: string
    description: The ID of the job being run.
    JSONPath: .status.build_id
  - name: Type
    type: string
    description: The type of job being run.
    JSONPath: .spec.type
  - name: Org
    type: string
    description: The org for which the job is running.
    JSONPath: .spec.refs.org
  - name: Repo
    type: string
    description: The repo for which the job is running.
    JSONPath: .spec.refs.repo
  - name: Pulls
    type: string
    description: The pulls for which the job is running.
    JSONPath: ".spec.refs.pulls[*].number"
  - name: StartTime
    type: date
    description: When the job started running.
    JSONPath: .status.startTime
  - name: CompletionTime
    type: date
    description: When the job finished running.
    JSONPath: .status.completionTime
  - name: State
    description: The state of the job.
    type: string
    JSONPath: .status.state
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: hook
  labels:
    app: hook
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: hook
  template:
    metadata:
      labels:
        app: hook
    spec:
      serviceAccountName: "hook"
      terminationGracePeriodSeconds: 180
      containers:
      - name: hook
        image: gcr.io/k8s-prow/hook:v20190731-e3f7b9853
        imagePullPolicy: Always
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: hmac
          mountPath: /etc/webhook
          readOnly: true
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 600
      volumes:
      - name: hmac
        secret:
          secretName: hmac-token
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: config
      - name: plugins
        configMap:
          name: plugins
---
apiVersion: v1
kind: Service
metadata:
  name: hook
  namespace: default
spec:
  clusterIP: 10.55.254.214
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 30298
    port: 8888
    protocol: TCP
    targetPort: 8888
  selector:
    app: hook
  sessionAffinity: None
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: default
  name: plank
  labels:
    app: plank
spec:
  replicas: 1 # Do not scale up.
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: plank
    spec:
      serviceAccountName: "plank"
      containers:
      - name: plank
        image: gcr.io/k8s-prow/plank:v20190731-e3f7b9853
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        volumeMounts:
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: sinker
  labels:
    app: sinker
spec:
  selector:
    matchLabels:
      app: sinker
  replicas: 1
  template:
    metadata:
      labels:
        app: sinker
    spec:
      serviceAccountName: "sinker"
      containers:
      - name: sinker
        image: gcr.io/k8s-prow/sinker:v20190731-e3f7b9853
        args:
        - --config-path=/etc/config/config.yaml
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: deck
  labels:
    app: deck
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: deck
  template:
    metadata:
      labels:
        app: deck
    spec:
      serviceAccountName: "deck"
      terminationGracePeriodSeconds: 30
      containers:
      - name: deck
        image: gcr.io/k8s-prow/deck:v20190731-e3f7b9853
        args:
        - --config-path=/etc/config/config.yaml
        - --tide-url=http://tide/
        - --hook-url=http://hook:8888/plugin-help
        ports:
          - name: http
            containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 600
      volumes:
      - name: config
        configMap:
          name: config
---
apiVersion: v1
kind: Service
metadata:
  name: deck
  namespace: default
spec:
  clusterIP: 10.55.250.236
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 31957
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: deck
  sessionAffinity: None
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: horologium
  labels:
    app: horologium
spec:
  replicas: 1 # Do not scale up.
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: horologium
  template:
    metadata:
      labels:
        app: horologium
    spec:
      serviceAccountName: "horologium"
      terminationGracePeriodSeconds: 30
      containers:
      - name: horologium
        image: gcr.io/k8s-prow/horologium:v20190731-e3f7b9853
        args:
        - --config-path=/etc/config/config.yaml
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: tide
  labels:
    app: tide
spec:
  replicas: 1 # Do not scale up.
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: tide
  template:
    metadata:
      labels:
        app: tide
    spec:
      serviceAccountName: "tide"
      containers:
      - name: tide
        image: gcr.io/k8s-prow/tide:v20190731-e3f7b9853
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: config
---
apiVersion: v1
kind: Service
metadata:
  name: tide
  namespace: default
spec:
  clusterIP: 10.55.243.29
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 31878
    port: 80
    protocol: TCP
    targetPort: 8888
  selector:
    app: tide
  sessionAffinity: None
  type: NodePort
#---
#
# TODO(#54) This component was added after our initial Prow setup
#
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: statusreconciler
#  namespace: default
#  labels:
#    app: statusreconciler
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: statusreconciler
#  template:
#    metadata:
#      labels:
#        app: statusreconciler
#    spec:
#      serviceAccountName: statusreconciler
#      terminationGracePeriodSeconds: 180
#      containers:
#      - name: statusreconciler
#        image: gcr.io/k8s-prow/status-reconciler:v20190731-e3f7b9853
#        args:
#        - --dry-run=false
#        - --continue-on-error=true
#        - --plugin-config=/etc/plugins/plugins.yaml
#        - --config-path=/etc/config/config.yaml
#        - --github-token-path=/etc/github/oauth
#        volumeMounts:
#        - name: oauth
#          mountPath: /etc/github
#          readOnly: true
#        - name: config
#          mountPath: /etc/config
#          readOnly: true
#        - name: plugins
#          mountPath: /etc/plugins
#          readOnly: true
#      volumes:
#      - name: oauth
#        secret:
#          secretName: oauth-token
#      - name: config
#        configMap:
#          name: config
#      - name: plugins
#        configMap:
#          name: plugins
---
apiVersion: v1
kind: Namespace
metadata:
  name: test-pods
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: default
  name: "deck"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "deck"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "deck"
subjects:
- kind: ServiceAccount
  name: "deck"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: test-pods
  name: "deck"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "deck"
subjects:
- kind: ServiceAccount
  name: "deck"
  namespace: default
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "deck"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - list
      # Required when deck runs with `--rerun-creates-job=true`
      # **Warning:** Only use this for non-public deck instances, this allows
      # anyone with access to your Deck instance to create new Prowjobs
      # - create
  # Added this permission b/c we are making our pods in `default`
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: test-pods
  name: "deck"
rules:
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: default
  name: "horologium"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "horologium"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "horologium"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "horologium"
subjects:
- kind: ServiceAccount
  name: "horologium"
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: default
  name: "plank"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "plank"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - create
      - list
      - update
  # Added this permission b/c we are making our pods in `default`
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
      - delete
      - list
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: test-pods
  name: "plank"
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
      - delete
      - list
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "plank"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "plank"
subjects:
- kind: ServiceAccount
  name: "plank"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: test-pods
  name: "plank"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "plank"
subjects:
- kind: ServiceAccount
  name: "plank"
  namespace: default
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: default
  name: "sinker"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "sinker"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - delete
      - list
  # Added this permission b/c we are making our pods in `default`
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - list
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: test-pods
  name: "sinker"
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - list
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "sinker"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "sinker"
subjects:
- kind: ServiceAccount
  name: "sinker"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: test-pods
  name: "sinker"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "sinker"
subjects:
- kind: ServiceAccount
  name: "sinker"
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: "hook"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "hook"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - get
      - update
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "hook"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "hook"
subjects:
- kind: ServiceAccount
  name: "hook"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: "tide"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "tide"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: "tide"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "tide"
subjects:
- kind: ServiceAccount
  name: "tide"
#---
#
# TODO(#54) The statusreconciler component was added after our initial Prow setup
#
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  namespace: default
#  name: "statusreconciler"
#---
#
# TODO(#54) The statusreconciler component was added after our initial Prow setup
#
#kind: Role
#apiVersion: rbac.authorization.k8s.io/v1beta1
#metadata:
#  namespace: default
#  name: "statusreconciler"
#rules:
#  - apiGroups:
#      - "prow.k8s.io"
#    resources:
#      - prowjobs
#    verbs:
#      - create
#---
#
# TODO(#54) The statusreconciler component was added after our initial Prow setup
#
#kind: RoleBinding
#apiVersion: rbac.authorization.k8s.io/v1beta1
#metadata:
#  namespace: default
#  name: "statusreconciler"
#roleRef:
#  apiGroup: rbac.authorization.k8s.io
#  kind: Role
#  name: "statusreconciler"
#subjects:
#- kind: ServiceAccount
#  name: "statusreconciler"
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: "crier"
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: crier
rules:
- apiGroups:
    - "prow.k8s.io"
  resources:
    - "prowjobs"
  verbs:
    - "get"
    - "watch"
    - "list"
    - "patch"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: "crier"
  namespace: "default"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "crier"
subjects:
- kind: ServiceAccount
  name: "crier"
  namespace: "default"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crier
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crier
  template:
    metadata:
      labels:
        app: crier
    spec:
      serviceAccountName: crier
      terminationGracePeriodSeconds: 30
      containers:
      - name: crier
        image: gcr.io/k8s-prow/crier:v20190814-9981dc3c5
        args:
        - --github-workers=1
        - --config-path=/etc/config/config.yaml
        - --github-endpoint=https://api.github.com
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: oauth
          mountPath: /etc/github
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
      - name: oauth
        secret:
          secretName: oauth-token
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prow-pipeline
  namespace: default
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-pipeline
rules:
- apiGroups:
  - tekton.dev
  resources:
  - pipelineruns
  - pipelineresources
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - prow.k8s.io
  resources:
  - prowjobs
  - prowjobs/status
  verbs:
  - get
  - list
  - watch
  - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-pipeline
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prow-pipeline
subjects:
- kind: ServiceAccount
  name: prow-pipeline
  namespace: default
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: prow-pipeline
  namespace: default
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: prow-pipeline
  template:
    metadata:
      labels:
        app: prow-pipeline
    spec:
      serviceAccountName: prow-pipeline
      containers:
      - name: pipeline
        image: gcr.io/k8s-prow/pipeline:v20190814-9981dc3c5
        args:
        - --all-contexts
        - --config=/etc/prow-config/config.yaml
        volumeMounts:
        - mountPath: /etc/prow-config
          name: prow-config
          readOnly: true
      volumes:
      - name: prow-config
        configMap:
          name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: needs-rebase
  labels:
    app: needs-rebase
spec:
  replicas: 1
  selector:
    matchLabels:
      app: needs-rebase
  template:
    metadata:
      labels:
        app: needs-rebase
    spec:
      terminationGracePeriodSeconds: 180
      containers:
      - name: needs-rebase
        image: gcr.io/k8s-prow/needs-rebase:v20190731-e3f7b9853
        imagePullPolicy: Always
        args:
        - --dry-run=false
        - --github-endpoint=https://api.github.com
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: hmac
          mountPath: /etc/webhook
          readOnly: true
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
      volumes:
      - name: hmac
        secret:
          secretName: hmac-token
      - name: oauth
        secret:
          secretName: oauth-token
      - name: plugins
        configMap:
          name: plugins
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: needs-rebase
spec:
  selector:
    app: needs-rebase
  ports:
  - port: 80
    targetPort: 8888
  type: NodePort
