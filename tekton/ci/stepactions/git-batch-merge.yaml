apiVersion: tekton.dev/v1alpha1
kind: StepAction
metadata:
  name: git-batch-merge
  annotations:
    tekton.dev/pipelines.minVersion: "0.54.0"
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: "git batch merge"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  params:
    - name: sourcePath
      description: The git repo will be cloned onto this path
    - name: url
      description: git url to clone
      type: string
    - name: revision
      description: base git revision to checkout (branch, tag, sha, refâ€¦)
      type: string
      default: master
    - name: refspec
      description: base git refspec to fetch before checking out revision
      type: string
      default: "refs/heads/master:refs/heads/master"
    - name: batchedRefs
      description: git refs to fetch and batch on top of revision using the given mode (must be a valid refname, no commit SHA's)
      type: string
    - name: gitUserName
      description: git user name to use for creating the batched commit (First Last)
      type: string
      default: GitBatch Task
    - name: gitUserEmail
      description: git user email to use for creating the batched commit (First.Last@domain.com)
      type: string
      default: GitBatch.Task@tekton.dev
    - name: mode
      description: git operation to perform while batching (choose from merge, cherry-pick)
      type: string
      default: merge
    - name: submodules
      description: defines if the resource should initialize and fetch the submodules
      type: string
      default: "true"
    - name: depth
      description: performs a shallow clone where only the most recent commit(s) will be fetched
      type: string
      default: "0"
    - name: sslVerify
      description: defines if http.sslVerify should be set to true or false in the global git config
      type: string
      default: "true"
    - name: subdirectory
      description: subdirectory inside the "output" workspace to clone the git repo into
      type: string
      default: ""
    - name: deleteExisting
      description: clean out the contents of the repo's destination directory (if it already exists) before trying to clone the repo there
      type: string
      default: "false"
    - name: gitInitImage
      description: The image used where the git-init binary is.
      default: "ghcr.io/tektoncd/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1"
      type: string
  results:
    - name: commit
      description: The final commit SHA that was obtained after batching all provided refs onto revision
    - name: tree
      description: The git tree SHA that was obtained after batching all provided refs onto revision.
  env:
    - name: PARAM_SOURCE_PATH
      value: $(params.sourcePath)
    - name: PARAM_SUB_DIR
      value: $(params.subdirectory)
    - name: PARAM_DELETE_EXISTING
      value: $(params.deleteExisting)
    - name: PARAM_BATCHED_REFS
      value: $(params.batchedRefs)
    - name: PARAM_REF_SPEC
      value: $(params.refspec)
    - name: PARAM_URL
      value: $(params.url)
    - name: PARAM_REVISION
      value: $(params.revision)
    - name: PARAM_SSL_VERIFY
      value: $(params.sslVerify)
    - name: PARAM_SUBMODULES
      value: $(params.submodules)
    - name: PARAM_DEPTH
      value: $(params.depth)
    - name: PARAM_GIT_USER_NAME
      value: $(params.gitUserName)
    - name: PARAM_GIT_USER_EMAIL
      value: $(params.gitUserEmail)
    - name: PARAM_MODE
      value: $(params.mode)
  image: $(params.gitInitImage)
  script: |
    CHECKOUT_DIR="${PARAM_SOURCE_PATH}/${PARAM_SUB_DIR}"

    cleandir() {
      # Delete any existing contents of the repo directory if it exists.
      #
      # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
      # or the root of a mounted volume.
      if [[ -d "$CHECKOUT_DIR" ]] ; then
        # Delete non-hidden files and directories
        rm -rf "$CHECKOUT_DIR"/*
        # Delete files and directories starting with . but excluding ..
        rm -rf "$CHECKOUT_DIR"/.[!.]*
        # Delete files and directories starting with .. plus any other character
        rm -rf "$CHECKOUT_DIR"/..?*
      fi
    }

    if [[ "${PARAM_DELETE_EXISTING}" == "true" ]] ; then
      cleandir
    fi

    p="${PARAM_BATCHED_REFS}"
    refs="${PARAM_REF_SPEC}"
    for ref in $p; do
      refs="$refs $ref:refs/batch/$ref"
    done

    /ko-app/git-init \
      -url "${PARAM_URL}" \
      -revision "${PARAM_REVISION}" \
      -refspec "$refs" \
      -path "$CHECKOUT_DIR" \
      -sslVerify="${PARAM_SSL_VERIFY}" \
      -submodules="${PARAM_SUBMODULES}" \
      -depth "${PARAM_DEPTH}"

    git -C $CHECKOUT_DIR config user.name "${PARAM_GIT_USER_NAME}"
    git -C $CHECKOUT_DIR config user.email "${PARAM_GIT_USER_EMAIL}"

    mode="${PARAM_MODE}"
    if [[ $mode == "merge" ]]; then
      for ref in $p; do
         git -C $CHECKOUT_DIR merge --quiet --allow-unrelated-histories refs/batch/$ref
      done
    elif [[ $mode == "cherry-pick" ]]; then
      for ref in $p; do
         git -C $CHECKOUT_DIR cherry-pick --allow-empty --keep-redundant-commits refs/batch/$ref
      done
    else
        echo "unsupported mode $mode"
        exit 1
    fi

    RESULT_SHA="$(git -C $CHECKOUT_DIR rev-parse HEAD)"
    TREE_SHA="$(git -C $CHECKOUT_DIR rev-parse HEAD^{tree})"
    # Make sure we don't add a trailing newline to the result!
    echo -n "$(echo $RESULT_SHA | tr -d '\n')" > $(step.results.commit.path)
    echo -n "$(echo $TREE_SHA | tr -d '\n')" > $(step.results.tree.path)
