apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: catlin-lint
  namespace: tektonci
spec:
  description: >-
    This task detects changes in the pull request using git diff
    and stores the changed tasks names in a workspace and passes
    that to the catlin so that catlin can validate only changed
    files.
  workspaces:
    - name: store-changed-files
      description: Stores list of changed tasks
  params:
    - name: gitCloneDepth
      description: Number of commits in the change + 1
  resources:
    inputs:
      - name: source
        type: git
  steps:
    - name: find-changed-tasks
      image: docker.io/alpine/git:v2.26.2@sha256:23618034b0be9205d9cc0846eb711b12ba4c9b468efdd8a59aac1d7b1a23363f
      workingDir: $(resources.inputs.source.path)
      script: |
        function detect_new_changed_tasks() {
          # detect for changes in the task manifest
          git --no-pager diff --name-only HEAD~$(( $(params.gitCloneDepth) - 1 ))|grep 'task/[^\/]*/[^\/]*/*[^/]*.yaml'|xargs -I {} dirname {}
        }
        all_tests=$(detect_new_changed_tasks |sort -u || true)
        final_tests=""
        # check for the tasks which are removed completely and skip them
        for task in $all_tests; do
          [[ ! -d $task ]] && continue
          final_tests="$final_tests $task"
        done
        echo -n $final_tests > $(workspaces.store-changed-files.path)/changed-files.txt
    - name: lint-catalog
      image: gcr.io/tekton-releases/dogfooding/catlin:latest
      workingDir: $(resources.inputs.source.path)
      script: |
        set +e
        [[ ! -s $(workspaces.store-changed-files.path)/changed-files.txt ]] && {
          echo "No file change detected in task directory"
          echo -n "" > $(workspaces.store-changed-files.path)/catlin.txt
          exit 0
        }

        # creating a file which will contain the final formatted output
        # which needs to be added as a comment(if any)
        echo '**Catlin Output**' >> $(workspaces.store-changed-files.path)/catlin.txt
        echo '```' >> $(workspaces.store-changed-files.path)/catlin.txt

        # performing catlin validate
        catlin validate $(cat $(workspaces.store-changed-files.path)/changed-files.txt) | tee -a $(workspaces.store-changed-files.path)/catlin.txt
        echo '```' >> $(workspaces.store-changed-files.path)/catlin.txt

        # checking if there are any ERROR or WARN messages produced by catlin
        isWarning=$(cat  $(workspaces.store-changed-files.path)/catlin.txt | grep -c "WARN")
        isError=$(cat  $(workspaces.store-changed-files.path)/catlin.txt | grep -c "ERROR")

        # if there are no ERROR or WARN messages then add a empty string which will not
        # add a comment on the Github PR
        [[ $isWarning -eq 0 ]] && [[ $isError -eq 0 ]] && \
        echo -n "" > $(workspaces.store-changed-files.path)/catlin.txt

        # if catlin produced the error then fail the task else success
        [[ $isError -eq 1 ]] && exit 1 || exit 0
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: catlin-linter
  namespace: tektonci
spec:
  workspaces:
    - name: store-changed-files
      description: Stores list of changed tasks
  resources:
    - name: source
      type: git
  params:
    - name: gitCloneDepth
      description: Number of commits in the change + 1
    - name: gitHubCommand
      description: The command that was used to trigger testing
    - name: checkName
      description: The name of the GitHub check that this pipeline is used for
    - name: pullRequestUrl
      description: The HTML URL for the pull request
  tasks:
    - name: lint-catalog
      conditions:
        - conditionRef: "check-name-matches"
          params:
            - name: gitHubCommand
              value: $(params.gitHubCommand)
            - name: checkName
              value: $(params.checkName)
      taskRef:
        name: catlin-lint
      workspaces:
        - name: store-changed-files
          workspace: store-changed-files
      resources:
        inputs:
          - name: source
            resource: source
      params:
        - name: gitCloneDepth
          value: $(params.gitCloneDepth)
  finally:
    - name: post-comment
      taskRef:
        name: github-add-comment
      params:
        - name: COMMENT_OR_FILE
          value: "catlin.txt"
        - name: GITHUB_TOKEN_SECRET_NAME
          value: bot-token-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: bot-token
        - name: REQUEST_URL
          value: $(params.pullRequestUrl)
      workspaces:
        - name: comment-file
          workspace: store-changed-files
