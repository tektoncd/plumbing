apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: golang-lint
  namespace: tektonci
  description: |
    Lint golang source using golangci-lint
spec:
  params:
  - name: version
    description: golangci-lint version to use
    default: "v1.27.0"
  - name: flags
    description: flags to use for the golangci-lint run command
    default: --verbose
  - name: GOOS
    description: "running operating system target"
    default: linux
  - name: GOARCH
    description: "running architecture target"
    default: amd64
  - name: GO111MODULE
    description: "value of module support"
    default: auto
  resources:
    inputs:
      - name: source
        type: git
  steps:
  - name: lint
    image: golangci/golangci-lint:$(params.version)
    script: |
      #!/bin/sh
      set -ex
      cd /workspace/source/
      golangci-lint run $(params.flags)
    env:
    - name: GOPATH
      value: /workspace
    - name: GOOS
      value: "$(params.GOOS)"
    - name: GOARCH
      value: "$(params.GOARCH)"
    - name: GO111MODULE
      value: "$(params.GO111MODULE)"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: yamllint
  namespace: tektonci
  description: |
    Lint yamls
spec:
  params:
  - name: folders
    description: The folders to lint with yamllint
  workspaces:
    - name: source
  steps:
  - name: lint
    image: gcr.io/tekton-releases/dogfooding/yamllint:latest
    workingDir: $(workspaces.source.path)
    script: |
      #!/bin/sh
      set -ex
      yamllint $(params.folders)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kind-label
  namespace: tektonci
  description: |
    Verifies that a PR has one valid kind label
spec:
  params:
  - name: labels
    description: The labels attached to the Pull Request
  volumes:
  - name: label-config-v2
    configMap:
      name: label-config-v2
  stepTemplate:
    env:
      - name: HOME
        value: /tekton/home
  steps:
  - name: install-pyyaml
    image: python:3-alpine
    script: |
      pip install pyyaml --user
  - name: check-labels
    image: python:3-alpine
    volumeMounts:
      - name: label-config-v2
        mountPath: /etc/config
    script: |
      #!/usr/bin/env python

      import json
      import yaml
      import sys

      prLabelsText = """$(params.labels)"""
      prLabels = json.loads(prLabelsText)

      availableLabels = None
      with open("/etc/config/labels.yaml", "r") as stream:
        availableLabels = yaml.safe_load(stream)["default"]["labels"]

      availableKindLabels = {x.get("name"):x.get("description") for x in availableLabels if x.get("name").startswith("kind/")}
      foundKindLabels = set([x.get("name") for x in prLabels if x.get("name").startswith("kind/") and x.get("name")])
      validKindLabels = set([x for x in foundKindLabels if x in availableKindLabels])

      # Check that we have one and only one kind label
      foundLabels = len(validKindLabels)
      if (foundLabels > 1 or foundLabels == 0):
        msg = "Error: {} valid \"kind/*\" labels found".format(foundLabels)
        if foundLabels > 1:
            msg += "({})".format(validKindLabels)
        msg += ", expecting exactly one."
        invalidKindLabels = foundKindLabels - validKindLabels
        if len(invalidKindLabels) > 0:
            msg += " Invalid labels found: {}".format(invalidKindLabels)
        print(msg)
        print("\nAvailable \"kind/*\" labels are:")
        for label, description in availableKindLabels.items():
          print("\t{}: {}".format(label, description))

        # Check failed. Return exit code 1.
        sys.exit(1)
      else:
        print("Exactly one \"kind/*\" label found: {}".format(validKindLabels))
