# Copyright 2022 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gubernator-start
spec:
  description: >-
    This task can be executed when a Tekton CI job is started, and it produces
    the start metadata required by Gubernator, see https://github.com/kubernetes/test-infra/tree/master/gubernator#job-artifact-gcs-layout

    Folder structure:
    .
    └── pr-logs
      ├── directory                # symlinks for builds live here
      │   └── job_name             # contains all symlinks for a job
      │       ├── build_number.txt # contains one line: location of artifacts for the build
      │       └── latest-build.txt # contains the latest build id of a job
      └── pull
          └── org_repo                     # jobs testing PRs for org/repo live here
              └── pull_number              # jobs running for a PR with pull_number live here
                  └── job_name             # all builds for the job for this pr live here
                      └── build_number     # contains job artifacts, as above
                      └── latest-build.txt # contains the latest build id of a job

    Build number folder content:
    .
    └── started.json      # metadata uploaded once the build starts

  workspaces:
    - name: shared
      description: Workspace where the data is written
  params:
    - name: package
      description: The GitHub org/repo
    - name: jobName
      description: Name of the CI job
    - name: jobRunName
      description: The name (or number) of the job execution
    - name: buildId
      description: The prow-style buildId
    - name: pullRequestNumber
      description: The GitHub pull request number
    - name: gitRevision
      description: The git ref of the top commit in the pull request
    - name: bucket
      description: The object storage bucket
      default: "gs://tekton-prow"
  stepTemplate:
    env:
      - name: DIRECTORY_PATH
        value: pr-logs/directory/$(params.jobName)
      - name: PULL_ROOT_PATH
        value: pr-logs/pull
      - name: LATEST_BUILD_LEAF_PATH
        value: $(params.pullRequestNumber)/$(params.jobName)
      - name: PACKAGE
        value: $(params.package)
      - name: GIT_REVISION
        value: $(params.gitRevision)
      - name: BUCKET
        value: $(params.bucket)
      - name: JOB_RUN_NAME
        value: $(params.jobRunName)
      - name: BUILD_ID
        value: $(params.buildId)
      - name: PR_NUMBER
        value: $(params.pullRequestNumber)
  steps:
    - name: write-data
      image: gcr.io/tekton-releases/dogfooding/tkn:v20230113-3deba3be3c@sha256:f977259288f8961d5e7ed966584f272431edadfda3bd0a30022ad9416ebde47e
      workingDir: $(workspaces.shared.path)
      script: |
        #!/usr/bin/env sh
        set -e

        # Create the directory folder
        mkdir -p "${DIRECTORY_PATH}"

        # Add path to the artifacts in the ${BUILD_ID}.txt
        echo "${BUCKET}/pr-logs/pull/${PACKAGE/\//_}/${LATEST_BUILD_LEAF_PATH}/${BUILD_ID}" > "${DIRECTORY_PATH}/${BUILD_ID}.txt"
        # Add the ${BUILD_ID} into latest-build.txt
        echo "${BUILD_ID}" > "${DIRECTORY_PATH}/latest-build.txt"

        # Create the Pull Request / Build folder
        BUILD_PATH="${PULL_ROOT_PATH}/${PACKAGE/\//_}/${LATEST_BUILD_LEAF_PATH}"
        mkdir -p "${BUILD_PATH}"
        mkdir -p "${BUILD_PATH}/${BUILD_ID}"

        # Create the latest-build.txt
        echo "${BUILD_ID}" > "${BUILD_PATH}/latest-build.txt"

        # Create the started.json file
        # Use the "time now" to simplify the logic
        cat <<EOF | tee "${BUILD_PATH}/${BUILD_ID}/started.json"
        {
          "timestamp": $(date +%s),
          "pull": "${PR_NUMBER}",
          "repos": {
            "${PACKAGE}": "${PR_NUMBER}:${GIT_REVISION}"
          }
        }
        EOF
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gubernator-stop
spec:
  description: >-
    This task can be executed when a Tekton CI job is finished, and it produces
    the stop metadata required by Gubernator, see https://github.com/kubernetes/test-infra/tree/master/gubernator#job-artifact-gcs-layout

    Folder structure:
    .
    └── pr-logs
      └── pull
          └── org_repo                     # jobs testing PRs for org/repo live here
              └── pull_number              # jobs running for a PR with pull_number live here
                  └── job_name             # all builds for the job for this pr live here
                      └── build_number     # contains job artifacts, as above

    Build number folder content:
    .
    ├── build-log.txt     # std{out,err} from the build
    └── finished.json     # metadata uploaded once the build finishes

  workspaces:
    - name: shared
      description: Workspace where the data is written
  params:
    - name: package
      description: The GitHub org/repo
    - name: jobName
      description: Name of the CI job
    - name: jobRunName
      description: The name (or number) of the job execution
    - name: buildId
      description: The prow-style buildId
    - name: pullRequestNumber
      description: The GitHub pull request number
    - name: jobStatus
      description: "success if the CI job was successful else failure"
    - name: gitRevision
      description: The git ref of the top commit in the pull request
  stepTemplate:
    env:
      - name: PULL_ROOT_PATH
        value: $(workspaces.shared.path)/pr-logs/pull
      - name: LATEST_BUILD_LEAF_PATH
        value: $(params.pullRequestNumber)/$(params.jobName)
      - name: PACKAGE
        value: $(params.package)
      - name: GIT_REVISION
        value: $(params.gitRevision)
      - name: JOB_RUN_NAME
        value: $(params.jobRunName)
      - name: BUILD_ID
        value: $(params.buildId)
      - name: JOB_STATUS
        value: $(params.jobStatus)
  steps:
    - name: write-data
      image: gcr.io/tekton-releases/dogfooding/tkn:v20230113-3deba3be3c@sha256:f977259288f8961d5e7ed966584f272431edadfda3bd0a30022ad9416ebde47e
      workingDir: $(workspaces.shared.path)
      script: |
        #!/usr/bin/env sh
        set -e

        # Create the Pull Request / Build folder (it should already exists)
        BUILD_PATH="${PULL_ROOT_PATH}/${PACKAGE/\//_}/${LATEST_BUILD_LEAF_PATH}/${BUILD_ID}"
        mkdir -p "${BUILD_PATH}" || true

        # Collect the build log - it will still be there unless the PipelineRun
        # has been cancelled or there is some very aggressive Pod pruning happening
        # This is specific to the Tekton dogfooding CI (hardcoded namespace)
        tkn pr logs -n tekton-ci "${JOB_RUN_NAME}" > "${BUILD_PATH}/build-log.txt"

        # Create the finished.json file
        # Use the "time now" to simplify the logic
        # Build the results from the status to simplify the logic
        if [ "$JOB_STATUS" == "failure" ]; then
          JOB_RESULT="FAILURE"
        else
          JOB_RESULT="SUCCESS"
        fi
        cat <<EOF | tee "${BUILD_PATH}/finished.json"
        {
          "timestamp": $(date +%s),
          "passed": "${JOB_STATUS}",
          "result": "${JOB_RESULT}",
          "revision": "${GIT_REVISION}"
        }
        EOF
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: gubernator-start
spec:
  workspaces:
    - name: shared
      description: Workspace to host the new bucket files
    - name: credentials
      description: Credentials to upload to the bucket
  params:
    - name: package
      description: The GitHub org/repo
    - name: jobName
      description: Name of the CI job
    - name: jobRunName
      description: The name (or number) of the job execution
    - name: buildId
      description: The prow-style buildId
    - name: pullRequestNumber
      description: The GitHub pull request number
    - name: gitRevision
      description: The git ref of the top commit in the pull request
    - name: bucket
      description: The object storage bucket
      default: "gs://tekton-prow"
  tasks:
    - name: create-data
      taskRef:
        name: gubernator-start
      workspaces:
        - name: shared
          workspace: shared
      params:
        - name: package
          value: $(params.package)
        - name: jobName
          value: $(params.jobName)
        - name: jobRunName
          value: $(params.jobRunName)
        - name: pullRequestNumber
          value: $(params.pullRequestNumber)
        - name: gitRevision
          value: $(params.gitRevision)
        - name: bucket
          value: $(params.bucket)
        - name: buildId
          value: $(params.buildId)
    - name: upload-data
      runAfter: ["create-data"]
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: ghcr.io/tektoncd/catalog/upstream/tasks/gcs-upload:0.3
          - name: name
            value: gcs-upload
          - name: kind
            value: task
      params:
        - name: path
          value: "."
        - name: location
          value: $(params.bucket)
      workspaces:
        - name: credentials
          workspace: credentials
        - name: source
          workspace: shared
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: gubernator-stop
spec:
  workspaces:
    - name: shared
      description: Workspace to host the new bucket files
    - name: credentials
      description: Credentials to upload to the bucket
  params:
    - name: package
      description: The GitHub org/repo
    - name: jobName
      description: Name of the CI job
    - name: jobRunName
      description: The name (or number) of the job execution
    - name: buildId
      description: The prow-style buildId
    - name: jobStatus
      description: "success if the CI job was successful else failure"
    - name: pullRequestNumber
      description: The GitHub pull request number
    - name: gitRevision
      description: The git ref of the top commit in the pull request
    - name: bucket
      description: The object storage bucket
      default: "gs://tekton-prow"
  tasks:
    - name: create-data
      taskRef:
        name: gubernator-stop
      workspaces:
        - name: shared
          workspace: shared
      params:
        - name: package
          value: $(params.package)
        - name: jobName
          value: $(params.jobName)
        - name: jobRunName
          value: $(params.jobRunName)
        - name: jobStatus
          value: $(params.jobStatus)
        - name: pullRequestNumber
          value: $(params.pullRequestNumber)
        - name: gitRevision
          value: $(params.gitRevision)
        - name: buildId
          value: $(params.buildId)
    - name: upload-data
      runAfter: ["create-data"]
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: ghcr.io/tektoncd/catalog/upstream/tasks/gcs-upload:0.3
          - name: name
            value: gcs-upload
          - name: kind
            value: task
      params:
        - name: path
          value: "."
        - name: location
          value: $(params.bucket)
      workspaces:
        - name: credentials
          workspace: credentials
        - name: source
          workspace: shared
