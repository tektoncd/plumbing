apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: check-git-files-changed
  annotations:
    description: |
      Returns "passed" in the "check" result if any of the files changed
      in the source on the workspace matches the regular expression.
      Returns a "files" result as a list of files modified by the PR that
      match the regex in the parameters.
    ci.tekton.dev/condition: |
      The result of this task is used to evaluate a condition.
      Events from this task are ignored downstream, when it comes to update the CI job status.
spec:
  params:
    - name: gitCloneDepth
      description: Number of commits + 1
    - name: regex
      description: Regular expression to match files changed
  workspaces:
    - name: input
  results:
    - name: check
      description: passed or failed
    - name: files
      description: list of files modified that match
      type: array
  steps:
    - name: check-files-changed
      image: gcr.io/tekton-releases/dogfooding/test-runner@sha256:d6a49b0d6822f4db7ede60d3f6bb41c1278079ad7c631fcaf00a609a977d0ac0 # golang 1.18.7
      env:
      - name: GIT_CLONE_DEPTH
        value: $(params.gitCloneDepth)
      - name: REGEX
        value: $(params.regex)
      script: |
        #!/usr/bin/env bash
        set -ex
        set -o pipefail

        BACK="HEAD~$(( ${GIT_CLONE_DEPTH} - 1 ))"
        CHECK="failed"
        cd $(workspaces.input.path)
        git diff-tree --no-commit-id --name-only -r HEAD $BACK | \
            grep -E "${REGEX}" | jq -ncR '[inputs]' > $(results.files.path) || true
        git diff-tree --no-commit-id --name-only -r HEAD $BACK | \
            grep -E "${REGEX}" && CHECK="passed"
        printf $CHECK > $(results.check.path)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: check-name-matches
  annotations:
    description: |
      Returns "passed" in the "check" result if the name of the CI Job
      (GitHub Check) matches the regular expression specified. This is used
      for the "/test" command in GitHub. The regular expression cannot contain spaces.
    ci.tekton.dev/condition: |
      The result of this task is used to evaluate a condition.
      Events from this task are ignored downstream, when it comes to update the CI job status.
spec:
  params:
    - name: gitHubCommand
      description: The whole comment left on GitHub
    - name: checkName
      description: The name of the check
  results:
    - name: check
      description: The result of the check, "passed" or "failed"
  steps:
    - name: check-name
      image: alpine
      env:
      - name: GITHUB_COMMAND
        value: $(params.gitHubCommand)
      - name: CHECK_NAME
        value: $(params.checkName)
      script: |
        #!/bin/sh
        set -ex
        set -o pipefail

        # Default to passed
        printf "passed" > $(results.check.path)

        # TODO(afrittoli) We might want to move this to an external script so
        # we can attach unit tests to it.

        # If no command was specified, the check is successful
        [[ "${GITHUB_COMMAND}" == "" ]] && exit 0

        # If a command was specified, the regex should match the checkName
        REGEX="$(echo ${GITHUB_COMMAND} | awk '{ print $2}')"
        [[ "$REGEX" == "" ]] && REGEX='.*'
        (echo "${CHECK_NAME}" | grep -E "$REGEX") \
            && printf "passed" > $(results.check.path) \
            || printf "failed" > $(results.check.path)
