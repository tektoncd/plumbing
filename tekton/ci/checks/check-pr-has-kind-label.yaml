apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: trigger-to-check-pr-labels
  namespace: tektonci
spec:
  params:
  - name: labels
    value: $(body.pull_request.labels)
  - name: pullRequestUrl
    value: $(body.pull_request.html_url)
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: check-pull-request-labels
  namespace: tektonci
spec:
  params:
  - name: buildUUID
    description: UUID used to track a CI Pipeline Run in logs
  - name: pullRequestNumber
    description: The pullRequestNumber
  - name: labels
    description: List of labels currently on the Pull Request
  - name: gitRepository
  - name: pullRequestUrl
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      name: check-pr-labels-$(uid)
      annotations:
        tekton.dev/gitURL: "$(params.gitRepository)"
      labels:
        prow.k8s.io/build-id: $(params.buildUUID)
        tekton.dev/check-name: check-pr-has-kind-label
        tekton.dev/kind: ci
        tekton.dev/pr-number: $(params.pullRequestNumber)
    spec:
      taskSpec:
        resources:
          inputs:
            - name: source
              type: git
            - name: pr
              type: pullRequest
          outputs:
            - name: pr
              type: pullRequest
        params:
        - name: labels
          description: The labels attached to the Pull Request
        - name: gitRepository
          description: The URL of the git repository
        - name: pullRequestUrl
          description: The URL of the Pull Request
        volumes:
        - name: label-config-v2
          configMap:
            name: label-config-v2
        steps:
        - name: copy-pr-to-output
          image: busybox
          script: |
            #!/bin/sh
            mkdir -p $(outputs.resources.pr.path)
            cp -r $(inputs.resources.pr.path)/* $(outputs.resources.pr.path)/
        - name: install-pyyaml
          image: python:3-alpine
          script: |
            pip install pyyaml --user
        - name: check-labels
          image: python:3-alpine
          volumeMounts:
            - name: label-config-v2
              mountPath: /etc/config
          script: |
            #!/usr/bin/env python

            import json
            import yaml
            import sys

            prLabels = json.loads('$(params.labels)')
            labelNames = list(map(lambda e: e["name"], prLabels))
            kindLabels = list(filter(lambda e: "kind" in e, labelNames))

            availableLabels = None
            with open("/etc/config/labels.yaml", "r") as stream:
              availableLabels = yaml.safe_load(stream)["default"]["labels"]

            availableKindLabels = list(filter(lambda e: "kind/" in e["name"], availableLabels))
            availableKindNamesAndDescriptions = map(lambda e: "`" +str(e["name"])+ "`" + ":  " + str(e["description"]), availableKindLabels)

            comment_template=""
            if (len(kindLabels) > 1 or len(kindLabels) == 0):
              comment_template += """
            **This PR cannot be merged:** expecting exactly one kind/ label

            <details>

            Available `kind/` labels are:

            """

              for i in availableKindNamesAndDescriptions:
                comment_template += i + "\n"

              comment_template += """

            </details>
            """
              new_comment_path = "$(outputs.resources.pr.path)/comments/new.json"
              comment_body = dict(body=comment_template)
              with open(new_comment_path, "w") as comment:
                json.dump(comment_body, comment)

              # Check failed. Return exit code 1.
              sys.exit(1)
      resources:
        inputs:
        - name: source
          resourceSpec:
            type: git
            params:
            - name: revision
              value: master
            - name: url
              value: $(params.gitRepository)
        - name: pr
          resourceSpec:
            type: pullRequest
            params:
            - name: url
              value: $(params.pullRequestUrl)
            secrets:
            - fieldName: authToken
              secretName: bot-token-github
              secretKey: bot-token
        outputs:
        - name: pr
          resourceSpec:
            type: pullRequest
            params:
            - name: url
              value: $(params.pullRequestUrl)
            secrets:
            - fieldName: authToken
              secretName: bot-token-github
              secretKey: bot-token
      params:
      - name: labels
        value: $(params.labels)
      - name: gitRepository
        value: $(params.gitRepository)
      - name: pullRequestUrl
        value: $(params.pullRequestUrl)
