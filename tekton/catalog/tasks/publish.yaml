apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: publish-release
  annotations:
    chains.tekton.dev/transparency-upload: "true"
spec:
  params:
  - name: package
    description: package to release (e.g. github.com/<org>/<project>)
  - name: subfolder
    description: folder within the package for which to publish a release
  - name: images
    description: List of cmd/* paths to be published as images
  - name: koExtraArgs
    description: Extra args to be passed to ko
    default: "--preserve-import-paths"
  - name: versionTag
    description: The vX.Y.Z version that the artifacts should be tagged with (including `v`)
  - name: imageRegistry
    description: The target image registry
  - name: imageRegistryPath
    description: The path (project) in the image registry
  - name: imageRegistryRegions
    description: The target image registry regions
    default: "us eu asia"
  - name: imageRegistryUser
    description: Username to be used to login to the container registry
    default: "_json_key"
  - name: releaseAsLatest
    description: Whether to tag and publish this release as Pipelines' latest
  - name: platforms
    description: Platforms to publish for the images (e.g. linux/amd64,linux/arm64)
    default: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le
  - name: serviceAccountPath
    description: The name of the service account path within the release-secret workspace
  workspaces:
    - name: source
      description: The workspace where the repo has been cloned into.
      mountPath: /go/src/$(params.package)
    - name: release-secret
      description: The secret that contains a service account authorized to push to the imageRegistry and to the output bucket
    - name: output
      description: The release YAML will be written to this workspace
  stepTemplate:
    env:
      - name: "PROJECT_ROOT"
        value: "$(workspaces.source.path)/$(params.subfolder)"
      - name: SUBFOLDER
        value: $(params.subfolder)
      - name: CONTAINER_REGISTRY_CREDENTIALS
        value: "$(workspaces.release-secret.path)/$(params.serviceAccountPath)"
      - name: IMAGE_REGISTRY
        value: "$(params.imageRegistry)"
      - name: CONTAINER_REGISTRY
        value: "$(params.imageRegistry)/$(params.imageRegistryPath)"
      - name: CONTAINER_REGISTRY_USER
        value: "$(params.imageRegistryUser)"
      - name: REGIONS
        value: "$(params.imageRegistryRegions)"
      - name: VERSION_TAG
        value: $(params.versionTag)
      - name: PLATFORMS
        value: $(params.platforms)
      - name: PACKAGE
        value: $(params.package)
      - name: RELEASE_AS_LATEST
        value: $(params.releaseAsLatest)
      - name: IMAGES
        value: $(params.images)
      - name: DOCKER_CONFIG
        value: /workspace/.docker
      - name: KO_EXTRA_ARGS
        value: "$(params.koExtraArgs)"
  results:
  # IMAGES result is picked up by Tekton Chains to sign the release.
  # See https://github.com/tektoncd/plumbing/blob/main/docs/signing.md for more info.
  - name: IMAGES
  steps:
  - name: container-registry-auth
    image: cgr.dev/chainguard/crane:latest-dev@sha256:6fc6fcdeb173c7951f038e6a7b230f586c1be05a011d9e6f9db6c614ec412c2f
    script: |
      #!/bin/sh
      set -ex

      # Login to IMAGE_REGISTRY. Crane will honour DOCKER_CONFIG.
      cat ${CONTAINER_REGISTRY_CREDENTIALS} | \
        crane auth login -u ${CONTAINER_REGISTRY_USER} --password-stdin ${IMAGE_REGISTRY}

      # Auth with account credentials for all regions.
      for region in ${REGIONS}
      do
        HOSTNAME=${region}.${IMAGE_REGISTRY}
        cat ${CONTAINER_REGISTRY_CREDENTIALS} | crane auth login -u ${CONTAINER_REGISTRY_USER} --password-stdin ${HOSTNAME}
      done
  - name: create-ko-yaml
    image: docker.io/library/busybox@sha256:c230832bd3b0be59a6c47ed64294f9ce71e91b327957920b6929a0caa8353140
    script: |
      #!/bin/sh
      set -ex

      cat <<EOF > ${PROJECT_ROOT}/.ko.yaml
      # This matches the value configured in .ko.yaml
      defaultBaseImage: gcr.io/distroless/static:nonroot
      EOF

      cat ${PROJECT_ROOT}/.ko.yaml

  - name: run-ko
    image: ghcr.io/tektoncd/plumbing/ko:v20240926-3daa55a03e@sha256:393155dbdd7c8d920925b202c88e4846f46a70c1e1dc218b0ea5e2d7e388b576
    env:
    - name: KO_DOCKER_REPO
      value: $(params.imageRegistry)/$(params.imageRegistryPath)
    - name: GO111MODULE
      value: "on"
    script: |
      #!/usr/bin/env sh
      set -ex

      # Change to directory with our .ko.yaml
      cd ${PROJECT_ROOT}

      # For each cmd/* directory, include a full gzipped tar of all source in
      # vendor/. This is overkill. Some deps' licenses require the source to be
      # included in the container image when they're used as a dependency.
      # Rather than trying to determine which deps have this requirement (and
      # probably get it wrong), we'll just targz up the whole vendor tree and
      # include it.
      go mod vendor
      TMPDIR=$(mktemp -d)
      tar cfz ${TMPDIR}/source.tar.gz vendor/
      for d in cmd/*; do
        if [ -d ${d}/kodata/ ]; then
          ln -s ${TMPDIR}/source.tar.gz ${d}/kodata/
        fi
      done

      # Rewrite "devel" to ${VERSION_TAG}
      sed -i -e 's/\(pipeline.tekton.dev\/release\): "devel"/\1: "'${VERSION_TAG}'"/g' -e 's/\(app.kubernetes.io\/version\): "devel"/\1: "'${VERSION_TAG}'"/g' -e 's/\(version\): "devel"/\1: "'${VERSION_TAG}'"/g' -e 's/\("-version"\), "devel"/\1, "'${VERSION_TAG}'"/g' ${PROJECT_ROOT}/config/*.yaml

      OUTPUT_RELEASE_DIR="$(workspaces.output.path)/${VERSION_TAG}"
      mkdir -p $OUTPUT_RELEASE_DIR

      # Publish images and create release.yaml
      ko resolve \
        --image-label=org.opencontainers.image.source=https://$(params.package) \
        --platform=$(params.platforms) ${KO_EXTRA_ARGS} \
        -t $(params.versionTag) \
        -f ${PROJECT_ROOT}/config/ > $OUTPUT_RELEASE_DIR/release.yaml
      # Publish images and create release.notags.yaml
      # This is useful if your container runtime doesn't support the `image-reference:tag@digest` notation
      # This is currently the case for `cri-o` (and most likely others)
      ko resolve \
        --image-label=org.opencontainers.image.source=https://$(params.package) \
        --platform=$(params.platforms) ${KO_EXTRA_ARGS} \
        -f ${PROJECT_ROOT}/config/ > $OUTPUT_RELEASE_DIR/release.notags.yaml
  - name: koparse
    image: ghcr.io/tektoncd/plumbing/koparse:v20240910-ec3cf3c749@sha256:5e8a522fc1e587fc00b69a6d73e0bfdf7a29ca143537a5542eb224680d2dbf2f
    script: |
      set -ex

      # Find "--preserve-import-paths" in a list of args
      function find_preserve_import_path() {
        for arg in $@; do
          if [[ "$arg" == "--preserve-import-paths" ]]; then
            return 0
          fi
        done
        return 1
      }

      # If "--preserve-import-paths" is used, include "package" in the expected path
      find_preserve_import_path \
        $(echo $KO_EXTRA_ARGS) && \
        PRESERVE_IMPORT_PATH="--preserve-path" || \
        PRESERVE_IMPORT_PATH="--no-preserve-path"

      IMAGES_PATH="${PACKAGE}"
      if [ "${SUBFOLDER}" != "" ]; then
        IMAGES_PATH="${IMAGES_PATH}/${SUBFOLDER}"
      fi

      for cmd in ${IMAGES}
      do
        IMAGES="${IMAGES} ${IMAGES_PATH}/cmd/${cmd}:${VERSION_TAG}"
      done

      # Parse the built images from the release.yaml generated by ko
      koparse \
        --path $OUTPUT_RELEASE_DIR/release.yaml \
        --base $(params.package) \
        --container-registry ${CONTAINER_REGISTRY} \
        --images ${IMAGES} \
        ${PRESERVE_IMPORT_PATH} > /workspace/built_images

  - name: tag-images
    image: cgr.dev/chainguard/crane:latest-dev@sha256:6fc6fcdeb173c7951f038e6a7b230f586c1be05a011d9e6f9db6c614ec412c2f
    script: |
      #!/bin/sh
      set -ex

      # Setup docker-auth
      DOCKER_CONFIG=~/.docker
      mkdir -p ${DOCKER_CONFIG}
      cp /workspace/docker-config.json ${DOCKER_CONFIG}/config.json

      # Tag the images and put them in all the regions
      for IMAGE in $(cat /workspace/built_images)
      do
        IMAGE_WITHOUT_SHA=${IMAGE%%@*}
        IMAGE_WITHOUT_SHA_AND_TAG=${IMAGE_WITHOUT_SHA%%:*}
        IMAGE_WITH_SHA=${IMAGE_WITHOUT_SHA_AND_TAG}@${IMAGE##*@}

        echo $IMAGE_WITH_SHA, >> $(results.IMAGES.path)

        if [[ "${RELEASE_AS_LATEST}" == "true" ]]
        then
          crane cp ${IMAGE_WITH_SHA} ${IMAGE_WITHOUT_SHA_AND_TAG}:latest
        fi
        for REGION in ${REGIONS}
        do
          if [[ "${RELEASE_AS_LATEST}" == "true" ]]
          then
            for TAG in "latest" "${VERSION_TAG}"
            do
              crane cp ${IMAGE_WITH_SHA} ${REGION}.${IMAGE_WITHOUT_SHA_AND_TAG}:$TAG
            done
          else
            TAG="${VERSION_TAG}"
            crane cp ${IMAGE_WITH_SHA} ${REGION}.${IMAGE_WITHOUT_SHA_AND_TAG}:$TAG
          fi
        done
      done
