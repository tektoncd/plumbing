---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: release
spec:
  params:
  - name: package
    description: package to release
    default: github.com/tektoncd/plumbing
  - name: subfolder
    description: folder to release within package
  - name: images
    description: List of cmd/* paths to be published as images
  - name: gitRevision
    description: the git revision to release
  - name: imageRegistry
    description: The target image registry
    default: gcr.io
  - name: imageRegistryPath
    description: The path (project) in the image registry
  - name: imageRegistryRegions
    description: The target image registry regions
    default: "us eu asia"
  - name: imageRegistryUser
    description: The user for the image registry credentials
    default: _json_key
  - name: versionTag
    description: The X.Y.Z version that the artifacts should be tagged with
  - name: releaseBucket
    description: bucket where the release is stored. The bucket must be project specific.
  - name: releaseAsLatest
    description: Whether to tag and publish this release as Pipelines' latest
    default: "true"
  - name: platforms
    description: Platforms to publish for the images (e.g. linux/amd64,linux/arm64)
    default: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le
  - name: koExtraArgs
    description: Extra args to be passed to ko
    default: "--preserve-import-paths"
  - name: serviceAccountPath
    description: The path to the service account file within the release-secret workspace
  - name: serviceAccountImagesPath
    description: The path to the service account file or credentials within the release-images-secret workspace
  - name: runTests
    description: If set to something other than "true", skip the build and test tasks
    default: "true"
  workspaces:
    - name: workarea
      description: The workspace where the repo will be cloned.
    - name: release-secret
      description: The secret that contains a service account authorized to push to the output bucket
    - name: release-images-secret
      description: The secret that contains a service account authorized to push to the imageRegistry
  results:
    - name: commit-sha
      description: the sha of the commit that was released
      value: $(tasks.git-clone.results.commit)
    - name: release-file
      description: the URL of the release file
      value: $(tasks.report-bucket.results.release)
    - name: release-file-no-tag
      description: the URL of the release file
      value: $(tasks.report-bucket.results.release-no-tag)
  tasks:
    - name: git-clone
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: ghcr.io/tektoncd/catalog/upstream/tasks/git-clone:0.7
          - name: name
            value: git-clone
          - name: kind
            value: task
      workspaces:
        - name: output
          workspace: workarea
          subpath: git
      params:
        - name: url
          value: https://$(params.package)
        - name: revision
          value: $(params.gitRevision)
    - name: unit-tests
      runAfter: [git-clone]
      when:
        - cel: "'$(params.runTests)' == 'true'"
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: ghcr.io/tektoncd/catalog/upstream/tasks/golang-test:0.2
          - name: name
            value: golang-test
          - name: kind
            value: task
      params:
        - name: package
          value: $(params.package)/$(params.subfolder)
      workspaces:
        - name: source
          workspace: workarea
          subpath: git/$(params.subfolder)
    - name: build
      runAfter: [git-clone]
      when:
        - cel: "'$(params.runTests)' == 'true'"
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: ghcr.io/tektoncd/catalog/upstream/tasks/golang-build:0.3
          - name: name
            value: golang-build
          - name: kind
            value: task
      params:
        - name: package
          value: $(params.package)/$(params.subfolder)
      workspaces:
        - name: source
          workspace: workarea
          subpath: git/$(params.subfolder)
    - name: publish-images
      runAfter: [build, unit-tests]
      taskRef:
        resolver: git
        params:
          - name: repo
            value: plumbing
          - name: org
            value: tektoncd
          - name: revision
            value: $(params.gitRevision)
          - name: pathInRepo
            value: tekton/catalog/tasks/publish.yaml
      params:
        - name: package
          value: $(params.package)
        - name: subfolder
          value: $(params.subfolder)
        - name: images
          value: $(params.images)
        - name: versionTag
          value: $(params.versionTag)
        - name: imageRegistry
          value: $(params.imageRegistry)
        - name: imageRegistryPath
          value: $(params.imageRegistryPath)
        - name: imageRegistryUser
          value: $(params.imageRegistryUser)
        - name: imageRegistryRegions
          value: $(params.imageRegistryRegions)
        - name: releaseAsLatest
          value: $(params.releaseAsLatest)
        - name: serviceAccountPath
          value: $(params.serviceAccountImagesPath)
        - name: platforms
          value: $(params.platforms)
        - name: koExtraArgs
          value: $(params.koExtraArgs)
      workspaces:
        - name: source
          workspace: workarea
          subpath: git
        - name: output
          workspace: workarea
          subpath: bucket
        - name: release-secret
          workspace: release-images-secret
    - name: publish-to-bucket
      runAfter: [publish-images]
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: ghcr.io/tektoncd/catalog/upstream/tasks/gcs-upload:0.3
          - name: name
            value: gcs-upload
          - name: kind
            value: task
      workspaces:
        - name: credentials
          workspace: release-secret
        - name: source
          workspace: workarea
          subpath: bucket
      params:
        - name: location
          value: $(params.releaseBucket)/previous/$(params.versionTag)
        - name: path
          value: $(params.versionTag)
        - name: serviceAccountPath
          value: $(params.serviceAccountPath)
    - name: publish-to-bucket-latest
      runAfter: [publish-images]
      when:
        - input: "$(params.releaseAsLatest)"
          operator: in
          values: ["true"]
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: ghcr.io/tektoncd/catalog/upstream/tasks/gcs-upload:0.3
          - name: name
            value: gcs-upload
          - name: kind
            value: task
      workspaces:
        - name: credentials
          workspace: release-secret
        - name: source
          workspace: workarea
          subpath: bucket
      params:
        - name: location
          value: $(params.releaseBucket)/latest
        - name: path
          value: $(params.versionTag)
        - name: serviceAccountPath
          value: $(params.serviceAccountPath)
        - name: deleteExtraFiles
          value: "true" # Uses rsync to copy content into latest
    - name: report-bucket
      runAfter: [publish-to-bucket]
      params:
        - name: releaseBucket
          value: $(params.releaseBucket)
        - name: versionTag
          value: $(params.versionTag)
      taskSpec:
        params:
          - name: releaseBucket
          - name: versionTag
        results:
          - name: release
            description: The full URL of the release file in the bucket
          - name: release-no-tag
            description: The full URL of the release file (no tag) in the bucket
        steps:
          - name: create-results
            image: docker.io/library/alpine:3.20.3@sha256:beefdbd8a1da6d2915566fde36db9db0b524eb737fc57cd1367effd16dc0d06d
            env:
            - name: RELEASE_BUCKET
              value: $(params.releaseBucket)
            - name: VERSION_TAG
              value: $(params.versionTag)
            script: |
              BASE_URL=$(echo "${RELEASE_BUCKET}/previous/${VERSION_TAG}")
              # If the bucket is in the gs:// return the corresponding public https URL
              BASE_URL=$(echo ${BASE_URL} | sed 's,gs://,https://storage.googleapis.com/,g')
              echo "${BASE_URL}/release.yaml" > $(results.release.path)
              echo "${BASE_URL}/release.notag.yaml" > $(results.release-no-tag.path)
