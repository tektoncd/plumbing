# Copyright 2020 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: tekton-cd
spec:
  serviceAccountName: tektoncd
  triggers:
    - name: configmaps
      interceptors:
        - cel:
            filter: >-
              'trigger-template' in body &&
              body['trigger-template'] == 'configmap'
      bindings:
        - ref: deploy-target-details
        - ref: deploy-source-git
        - ref: configmap-details
      template:
        ref: deploy-configmap
    - name: folders
      interceptors:
        - cel:
            filter: >-
              'trigger-template' in body &&
              body['trigger-template'] == 'folders'
      bindings:
        - ref: deploy-target-details
        - ref: deploy-source-git
        - ref: folder-details
      template:
        ref: deploy-from-folder
    - name: helm
      interceptors:
        - cel:
            filter: >-
              'trigger-template' in body &&
              body['trigger-template'] == 'helm'
      bindings:
        - ref: deploy-target-details
        - ref: helm-details
      template:
        ref: deploy-helm-chart
    - name: tekton
      interceptors:
        - cel:
            filter: >-
              'trigger-template' in body &&
              body['trigger-template'] == 'tekton'
      bindings:
        - ref: deploy-target-details
        - ref: tekton-details
        - ref: plumbing-git
      template:
        ref: deploy-tekton-release
    - name: cleanup
      interceptors:
        - cel:
            filter: >-
              'trigger-template' in body &&
              body['trigger-template'] == 'cleanup'
      bindings:
        - ref: deploy-target-details
        - ref: cleanup-details
      template:
        ref: cleanup-runs
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: tekton-events
spec:
  serviceAccountName: tektoncd
  replicas: 3
  triggers:
    - name: cd-pipeline-failed
      interceptors:
        - cel:
            filter: >-
              header.match('ce-type', 'dev.tekton.event.taskrun.failed.v1') &&
              body.taskRun.metadata.labels['triggers.tekton.dev/eventlistener'] == 'tekton-cd' &&
              body.taskRun.metadata.labels['triggers.tekton.dev/trigger'] in ['configmaps', 'folders', 'helm']
      bindings:
      - ref: cd-pipeline-type
      - ref: taskrun-meta
      - ref: dashboard-url-dogfooding
      template:
        ref: cd-pipeline-failed-slack
    - name: cd-pipeline-nightly-release-failed
      interceptors:
        - cel:
            filter: >-
              header.match('ce-type', 'dev.tekton.event.taskrun.failed.v1') &&
              body.taskRun.metadata.labels['triggers.tekton.dev/eventlistener'].endsWith('nightly-release-cron') &&
              body.taskRun.metadata.labels['triggers.tekton.dev/trigger'].endsWith('nightly-release-cron-trigger')
      bindings:
      - ref: cd-pipeline-type-nightly
      - ref: pipelinerun-meta
      - ref: dashboard-url-dogfooding
      template:
        ref: cd-pipeline-failed-slack
    - name: github-check-start
      interceptors:
        - cel:
            filter: >-
              header.match('ce-type', 'dev.tekton.event.taskrun.started.v1') &&
              body.taskRun.metadata.labels['tekton.dev/kind'] == 'ci' &&
              body.taskRun.metadata.labels['triggers.tekton.dev/eventlistener'] in ['tekton-ci-webhook', 'tekton-ci'] &&
              !('tekton.dev/conditionName' in body.taskRun.metadata.labels) &&
              !('ci.tekton.dev/condition' in body.taskRun.metadata.annotations) &&
              !(body.taskRun.metadata.name.indexOf('check-') == 0) &&
              'ownerReferences' in body.taskRun.metadata
            overlays:
              - key: repo
                expression: body.taskRun.metadata.annotations['tekton.dev/gitURL'].parseURL().path.substring(1)
      bindings:
        - ref: tekton-ci-taskrun-cloudevent
        - ref: tekton-ci-check-pending
        - ref: tekton-ci-taskrun-from-pipelinerun-cloudevent
        - ref: tekton-ci-overlays
      template:
        ref: tekton-ci-github-check-update
    - name: github-check-success
      interceptors:
        - cel:
            filter: >-
              header.match('ce-type', 'dev.tekton.event.taskrun.successful.v1') &&
              body.taskRun.metadata.labels['triggers.tekton.dev/eventlistener'] in ['tekton-ci-webhook', 'tekton-ci'] &&
              body.taskRun.metadata.labels['tekton.dev/kind'] == 'ci' &&
              !('tekton.dev/conditionName' in body.taskRun.metadata.labels) &&
              !('ci.tekton.dev/condition' in body.taskRun.metadata.annotations) &&
              !(body.taskRun.metadata.name.indexOf('check-') == 0) &&
              'ownerReferences' in body.taskRun.metadata
            overlays:
              - key: repo
                expression: body.taskRun.metadata.annotations['tekton.dev/gitURL'].parseURL().path.substring(1)
      bindings:
        - ref: tekton-ci-taskrun-cloudevent
        - ref: tekton-ci-check-success
        - ref: tekton-ci-taskrun-from-pipelinerun-cloudevent
        - ref: tekton-ci-overlays
      template:
        ref: tekton-ci-github-check-update
    - name: github-check-failure
      interceptors:
        - cel:
            filter: >-
              header.match('ce-type', 'dev.tekton.event.taskrun.failed.v1') &&
              body.taskRun.metadata.labels['triggers.tekton.dev/eventlistener'] in ['tekton-ci-webhook', 'tekton-ci'] &&
              body.taskRun.metadata.labels['tekton.dev/kind'] == 'ci' &&
              !('tekton.dev/conditionName' in body.taskRun.metadata.labels) &&
              !('ci.tekton.dev/condition' in body.taskRun.metadata.annotations) &&
              !(body.taskRun.metadata.name.indexOf('check-') == 0) &&
              'ownerReferences' in body.taskRun.metadata
            overlays:
              - key: repo
                expression: body.taskRun.metadata.annotations['tekton.dev/gitURL'].parseURL().path.substring(1)
      bindings:
        - ref: tekton-ci-taskrun-cloudevent
        - ref: tekton-ci-check-failure
        - ref: tekton-ci-taskrun-from-pipelinerun-cloudevent
        - ref: tekton-ci-overlays
      template:
        ref: tekton-ci-github-check-update