# Copyright 2020 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: deploy-from-folder
spec:
  params:
  - name: gitRepository
    description: URL of the repository that holds the folder
  - name: gitRevision
    description: Git revision
  - name: namespace
    description: Namespace to deploy to in the target cluster
  - name: clusterResource
    description: Name of the cluster resource that points to the target cluster
  - name: folderPath
    description: Path in the git repo the folder
  - name: folderDescription
    description: Used for a descriptive TaskRun name
  - name: deployMethod
    description: One of "apply", "create" or "replace"
    default: "apply"
  - name: isOverlay
    description: Whether the folder is a kustomize overlay "true" or "false"
    default: "false"
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: deploy-resources-$(tt.params.folderDescription)-
    spec:
      taskSpec:
        params:
        - name: folderPath
        - name: namespace
        - name: deployMethod
        - name: isOverlay
        resources:
          inputs:
            - name: source
              type: git
            - name: targetCluster
              type: cluster
        stepTemplate:
          env:
          - name: KUBECONFIG
            value: /workspace/$(resources.inputs.targetCluster.name)/kubeconfig
          - name: FOLDER_PATH
            value: $(params.folderPath)
          - name: NAMESPACE
            value: $(params.namespace)
          - name: DEPLOY_METHOD
            value: $(params.deployMethod)
          - name: IS_OVERLAY
            value: $(params.isOverlay)
        steps:
        - name: deploy-from-folder
          image: gcr.io/tekton-releases/dogfooding/kubectl
          script: |
            #!/bin/sh
            set -ex

            # Determine whether to enforce namespace across resources
            NAMESPACE_PARAM="-n ${NAMESPACE}"
            [[ "${NAMESPACE}" == "" ]] && NAMESPACE_PARAM=""

            # Handle overlays
            TARGET=$(resources.inputs.source.path)/${FOLDER_PATH}
            if [[ "${IS_OVERLAY}" == "true" ]]; then
              TARGET=target.yaml
              kustomize build \
                $(resources.inputs.source.path)/${FOLDER_PATH} > $TARGET
            fi

            # Check if there is any diff
            DIFF=diff.txt
            kubectl diff $NAMESPACE_PARAM -f $TARGET | tee $DIFF

            # If there is no diff, we don't need to update
            if [ ! -s ${DIFF?} ]; then
              echo "No change detected, nothing to be done."
              exit 0
            fi

            # When deploying with replace, we need to do a create first,
            # to ensure new resources are created
            CREATE_OUTPUT=create.txt
            if [[ "${DEPLOY_METHOD}" == "replace" ]]; then
              kubectl create $NAMESPACE_PARAM -f $TARGET  2> $CREATE_OUTPUT || true
              # If there was some unexpected message in the error log, fail
              if egrep -v '(already exists|^Warning)' $CREATE_OUTPUT; then
                  echo "Something went wrong when creating resources"
                  exit 1
              fi
            fi

            # Run the actual deployment. If it fails, it will fail the step.
            kubectl "${DEPLOY_METHOD}" $NAMESPACE_PARAM -f $TARGET
      params:
      - name: folderPath
        value: $(tt.params.folderPath)
      - name: namespace
        value: $(tt.params.namespace)
      - name: deployMethod
        value: $(tt.params.deployMethod)
      - name: isOverlay
        value: $(tt.params.isOverlay)
      resources:
        inputs:
          - name: source
            resourceSpec:
              type: git
              params:
              - name: revision
                value: $(tt.params.gitRevision)
              - name: url
                value: https://$(tt.params.gitRepository)
          - name: targetCluster
            resourceRef:
              name: $(tt.params.clusterResource)
