# Copyright 2020 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: deploy-configmap
spec:
  params:
  - name: gitRepository
    description: URL of the repository that holds configuration
  - name: gitRevision
    description: Git revision
  - name: namespace
    description: Namespace to deploy to in the target cluster
  - name: configPath
    description: Path in the git repo that holds configs
  - name: clusterResource
    description: Name of the cluster resource that points to the target cluster
  - name: configMapName
    description: Name of the configmap resource
  - name: configMapKey
    description: Name of the configmap key where the data is stored
  - name: configMapDescription
    description: Used for a descriptive TaskRun name
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: deploy-configmap-$(tt.params.configMapDescription)-
    spec:
      taskSpec:
        params:
          - name: configPath
          - name: namespace
          - name: configMapName
          - name: configMapKey
        resources:
          inputs:
            - name: source
              type: git
            - name: targetCluster
              type: cluster
        stepTemplate:
          env:
          - name: KUBECONFIG
            value: /workspace/$(resources.inputs.targetCluster.name)/kubeconfig
          - name: CONFIG_PATH
            value: $(params.configPath)
          - name: NAMESPACE
            value: $(params.namespace)
          - name: CONFIG_MAP_NAME
            value: $(params.configMapName)
          - name: CONFIG_MAP_KEY
            value: $(params.configMapKey)
        steps:
        - name: fetch-current-config
          image: gcr.io/tekton-releases/dogfooding/kubectl
          script: |
            #!/bin/sh
            set -ex
            kubectl get configmap -n ${NAMESPACE} \
              ${CONFIG_MAP_NAME} -o template \
              --template='{{ index .data "${CONFIG_MAP_KEY}" }}' > \
               /workspace/${CONFIG_MAP_KEY} || \
               rm /workspace/${CONFIG_MAP_KEY}
        - name: deploy
          image: gcr.io/tekton-releases/dogfooding/kubectl
          script: |
            #!/bin/sh
            set -ex
            if [ ! -f /workspace/${CONFIG_MAP_KEY} ]; then
              echo "First time deployment"
              kubectl create configmap ${CONFIG_MAP_NAME} \
                --from-file=${CONFIG_MAP_KEY}=$(resources.inputs.source.path)/${CONFIG_PATH} \
                -n ${NAMESPACE}
                exit 0
            fi
            echo "diff [current-config] [new config]"
            has_diff=0
            diff /workspace/${CONFIG_MAP_KEY} \
              $(resources.inputs.source.path)/${CONFIG_PATH} || has_diff=1
            if [ $has_diff -eq 0 ]; then
              echo "No change in config detected. Nothing to be done."
              exit 0
            fi
            # Apply configuration changes
            kubectl create configmap ${CONFIG_MAP_NAME} \
              --from-file=${CONFIG_MAP_KEY}=$(resources.inputs.source.path)/${CONFIG_PATH} \
              --dry-run -o yaml | \
              kubectl replace configmap ${CONFIG_MAP_NAME} -n ${NAMESPACE} -f -
      params:
      - name: configPath
        value: $(tt.params.configPath)
      - name: namespace
        value: $(tt.params.namespace)
      - name: configMapName
        value: $(tt.params.configMapName)
      - name: configMapKey
        value: $(tt.params.configMapKey)
      resources:
        inputs:
          - name: source
            resourceSpec:
              type: git
              params:
              - name: revision
                value: $(tt.params.gitRevision)
              - name: url
                value: https://$(tt.params.gitRepository)
          - name: targetCluster
            resourceRef:
              name: $(tt.params.clusterResource)
