# Copyright 2019 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-draft-release
spec:
  params:
  - name: package
    description: package (and its children) under test
  - name: release-name
    description: The name of the release (e.g. Cat + Robot for pipeline)
  - name: release-tag
    description: Release number and git tag to be applied (e.g. v0.888.1, with 'v')
  - name: previous-release-tag
    description: Previous release number - for author and PR list calculation
  resources:
    inputs:
      - name: source
        type: git
      - name: release-bucket
        type: storage
  stepTemplate:
    env:
      - name: GITHUB_TOKEN
        valueFrom:
          secretKeyRef:
            name: github-token
            key: GITHUB_TOKEN
      - name: VERSION
        value: $(params.release-tag)
      - name: PROJECT
        value: $(params.package)
      - name: OLD_VERSION
        value: $(params.previous-release-tag)
  steps:
    - name: header
      image: gcr.io/tekton-releases/dogfooding/hub
      script: |
        #!/bin/bash
        set -ex
        TEKTON_PROJECT=$(basename $PROJECT)

        cat <<EOF | tee $HOME/release.md
        Tekton ${TEKTON_PROJECT^} release ${VERSION} "$(params.release-name)"

        # ðŸŽ‰ [Tag Line - to be done] ðŸŽ‰

        -[Docs @ ${VERSION}](https://github.com/${PROJECT}/tree/${VERSION}/docs)
        -[Examples @ ${VERSION}](https://github.com/${PROJECT}/tree/${VERSION}/examples)

        ## Installation one-liner

        \`\`\`
        kubectl apply -f https://storage.googleapis.com/tekton-releases/${TEKTON_PROJECT}/previous/${VERSION}/release.yaml
        \`\`\`

        ## Upgrade Notices

        [TBD]

        ## Changes
        EOF
    - name: filter-data
      image: gcr.io/tekton-releases/dogfooding/hub
      workingdir: $(resources.inputs.source.path)
      script: |
        #!/usr/bin/env bash
        set -ex

        # Restore full git history
        git fetch --unshallow

        # UPPER_THRESHOLD is the newest sha we are interested in
        UPPER_THRESHOLD=$(inputs.resources.source.revision)
        # COMMON_ANCESTOR is the common ancestor between the OLD_VERSION and UPPER_THRESHOLD
        COMMON_ANCESTOR=$(git merge-base ${OLD_VERSION} ${UPPER_THRESHOLD})
        # OLD_RELEASE_SUBJECTS is the list of commit subjects cherry-picked (probably?) from main
        OLD_RELEASE_SUBJECTS=$HOME/old_subjects.txt
        echo "Cherry-picked commits:"
        git log --format="%s" $COMMON_ANCESTOR..$OLD_VERSION | sort -u | tee $OLD_RELEASE_SUBJECTS
        echo "OLD_VERSION: $OLD_VERSION"
        echo "COMMON_ANCESTOR: $COMMON_ANCESTOR"
        echo "UPPER_THRESHOLD: $UPPER_THRESHOLD"

        # Save the PR data in CSV. Only consider PRs whose sha verifies the condition
        # COMMON_ANCESTOR is ancestor of SHA is ancestor of UPPER_THRESHOLD
        # And title no in the OLD_VERSION branch.
        # Working Assumptions:
        #   - there are no duplicate titles in commits
        #   - we always cherry-pick full PRs, never commits out of a multi-commit PR
        # Format of output data:
        # "author;number;title"
        hub pr list --state merged -L 300 -f "%sm;%au;%i;%t;%L%n" | \
          while read pr; do
            SHA=$(echo $pr | cut -d';' -f1)
            # Skip the common ancestor has it has already been released
            if [ "$SHA" == "$COMMON_ANCESTOR" ]; then
              continue
            fi
            SUBJECT=$(git log -1 --format="%s" $SHA || echo "__NOT_FOUND__")
            git merge-base --is-ancestor $SHA $UPPER_THRESHOLD && \
            git merge-base --is-ancestor $COMMON_ANCESTOR $SHA && \
            ! $(egrep "^${SUBJECT}$" $OLD_RELEASE_SUBJECTS &> /dev/null) &&
            echo $pr | cut -d';' -f2-
          done > $HOME/pr.csv || true  # We do not want to fail is the last of the loop is not a match

        echo "$(wc -l $HOME/pr.csv | awk '{ print $1}') PRs in the new release."
        cat $HOME/pr.csv
    - name: release-notes
      image: stedolan/jq
      script: |
        #!/bin/bash
        set -e

        # First process pull requests that have release notes
        # Extract the release notes but drop lines that match an unmodified PR template
        # || true in case all PRs are "release-note-none"
        grep -v "release-note-none" $HOME/pr.csv > $HOME/pr-notes-tmp.csv || true
        cat $HOME/pr-notes-tmp.csv | while read pr; do
          PR_NUM=$(echo $pr | cut -d';' -f2)
          PR_RELEASE_NOTES_B64=$(wget -O- https://api.github.com/repos/${PROJECT}/issues/${PR_NUM:1} | \
            jq .body -r | grep -oPz '(?s)(?<=```release-note..)(.+?)(?=```)' | \
            grep -avP '\W*(Your release note here|action required: your release note here|NONE)\W*' | base64 -w0)
          echo "$pr;$PR_RELEASE_NOTES_B64" >> $HOME/pr-notes.csv
          # Avoid rate limiting
          sleep 0.2
        done

        # Copy pull requests without release notes to a dedicated file
        # || true in case no PRs have "release-note-none"
        grep "release-note-none" $HOME/pr.csv > $HOME/pr-no-notes.csv || true
    - name: body
      image: busybox
      script: |
        #!/bin/sh
        set -e
        cat <<EOF | tee -a $HOME/release.md

        # Features

        $(awk -F";" '/kind\/feature/{ print "echo -e \"* :sparkles: "$3" ("$2")\n\n$(echo "$5" | base64 -d)\n\"" }' $HOME/pr-notes.csv | sh)
        $(awk -F";" '/kind\/feature/{ print "* :sparkles: "$3" ("$2")" }' $HOME/pr-no-notes.csv)

        # Deprecation Notices

        * :rotating_light: [Deprecation Notice Title]

        [Detailed deprecation notice description] (#Number).

        [Fill list here]

        # Backwards incompatible changes

        In current release:

        * :rotating_light: [Change Title]

        [Detailed change description] (#Number).

        [Fill list here]

        # Fixes

        $(awk -F";" '/kind\/bug/{ print "echo -e \"* :bug: "$3" ("$2")\n\n$(echo "$5" | base64 -d)\n\"" }' $HOME/pr-notes.csv | sh)
        $(awk -F";" '/kind\/flake/{ print "echo -e \"* :bug: "$3" ("$2")\n\n$(echo "$5" | base64 -d)\n\"" }' $HOME/pr-notes.csv | sh)
        $(awk -F";" '/kind\/bug/{ print "* :bug: "$3" ("$2")" }' $HOME/pr-no-notes.csv)
        $(awk -F";" '/kind\/flake/{ print "* :bug: "$3" ("$2")" }' $HOME/pr-no-notes.csv)

        # Misc

        $(awk -F";" '/kind\/cleanup/{ print "echo -e \"* :hammer: "$3" ("$2")\n\n$(echo "$5" | base64 -d)\n\"" }' $HOME/pr-notes.csv | sh)
        $(awk -F";" '/kind\/misc/{ print "echo -e \"* :hammer: "$3" ("$2")\n\n$(echo "$5" | base64 -d)\n\"" }' $HOME/pr-notes.csv | sh)
        $(awk -F";" '/kind\/cleanup/{ print "* :hammer: "$3" ("$2")" }' $HOME/pr-no-notes.csv)
        $(awk -F";" '/kind\/misc/{ print "* :hammer: "$3" ("$2")" }' $HOME/pr-no-notes.csv)

        # Docs

        $(awk -F";" '/kind\/documentation/{ print "echo -e \"* :book: "$3" ("$2")\n\n$(echo "$5" | base64 -d)\n\"" }' $HOME/pr-notes.csv | sh)
        $(awk -F";" '/kind\/documentation/{ print "* :book: "$3" ("$2")" }' $HOME/pr-no-notes.csv)

        EOF

    - name: authors
      image: gcr.io/tekton-releases/dogfooding/hub
      workingdir: $(resources.inputs.source.path)
      script: |
        #!/usr/bin/env bash
        set -ex
        cat <<EOF | tee -a $HOME/release.md
        ## Thanks

        Thanks to these contributors who contributed to ${VERSION}!
        $(awk -F";" '{ print "* :heart: @"$1 }' $HOME/pr.csv | sort -u)

        Extra shout-out for awesome release notes:
        $(awk -F";" '{ print "* :heart_eyes: @"$1 }' $HOME/pr-notes.csv | sort -u)
        EOF
    - name: pr-data
      image: gcr.io/tekton-releases/dogfooding/hub
      workingdir: $(inputs.resources.source.path)
      script: |
        #!/usr/bin/env bash
        set -ex

        cat <<EOF | tee -a $HOME/release.md

        ## Unsorted PR List
        $(egrep -v 'kind/(feature|documentation|cleanup|flake|bug|misc)' $HOME/pr.csv | awk -F";" '{ print "- "$3" ("$2")" }')

        To Be Done: Deprecation Notices, Backward Incompatible Changes

        EOF
    - name: create-draft
      image: gcr.io/tekton-releases/dogfooding/hub
      workingdir: $(resources.inputs.source.path)
      script: |
        #!/usr/bin/env bash
        set -ex

        hub release create --draft --prerelease \
          --commitish $(inputs.resources.source.revision) \
          -a $(inputs.resources.release-bucket.path)/previous/${VERSION}/release.yaml \
          -a $(inputs.resources.release-bucket.path)/previous/${VERSION}/release.notags.yaml \
          --file $HOME/release.md ${VERSION}
