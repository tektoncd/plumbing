# Copyright 2019 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: install-tekton-release
spec:
  params:
  - name: projectName
    description: Name of the Tekton project to install e.g. pipeline, trigger, dashboard, experimental
    default: pipeline
  - name: namespace
    description: The namespace specified in the release. This does not enforce a namespace, it's used to verify that all pods are running in the specified namespace
    default: tekton-pipelines
  - name: version
    description: The vX.Y.Z version that we want to install (including `v`)
    default: latest
  - name: environment
    description: Name of the target environment. Used to apply relevant overalys
    default: dogfooding
  - name: release-file
    description: Name of the release file
    default: release.yaml
  - name: post-release-file
    description: Name of the release file
    default: ""
  resources:
    inputs:
      - name: release-bucket
        type: storage
      - name: k8s-cluster
        type: cluster
      - name: plumbing-library
        type: git
  stepTemplate:
    env:
      - name: KUBECONFIG
        value: /workspace/$(resources.inputs.k8s-cluster.name)/kubeconfig
      - name: PROJECT_NAME
        value: $(params.projectName)
      - name: NAMESPACE
        value: $(params.namespace)
      - name: VERSION
        value: $(params.version)
      - name: ENVIRONMENT
        value: $(params.environment)
      - name: RELEASE_FILE
        value: $(params.release-file)
      - name: POST_RELEASE_FILE
        value: $(params.post-release-file)

  steps:

  - name: deploy-tekton-project
    image: gcr.io/tekton-releases/dogfooding/ko-gcloud:latest
    script: |
      #!/usr/bin/env bash
      set -exo pipefail

      # Export KUBECONFIG so that it's available to pre-scripts too
      export KUBECONFIG
      # Set up RELEASE_ROOT
      if [[ "${VERSION}" == "latest" ]]; then
        RELEASE_ROOT=$(resources.inputs.release-bucket.path)/${VERSION}
      else
        RELEASE_ROOT=$(resources.inputs.release-bucket.path)/previous/${VERSION}
      fi

      # Handle Overlays
      OVERLAY_FOLDER=${PROJECT_NAME}/overlays/${ENVIRONMENT}
      APPLY_MODE="-k $OVERLAY_FOLDER"

      cd $(resources.inputs.plumbing-library.path)/tekton/cd

      if [ ! -d ${PROJECT_NAME} ]; then
        # There are is not base or project for ${PROJECT_NAME}
        # Apply the release as is
        APPLY_MODE="--filename $RELEASE_ROOT/${RELEASE_FILE}"
      else
        # If the base exists, an overlay for the specified environment must exist
        if [ ! -d  "$OVERLAY_FOLDER" ]; then
          echo "Environment ${ENVIRONMENT} not found for project ${PARAM.PROJECT_NAME}"
          exit 1
        fi
        cp $RELEASE_ROOT/${RELEASE_FILE} ${PROJECT_NAME}/base/release.yaml
        find .

        # Execute pre-deploy scripts if any
        scripts=$(find ${OVERLAY_FOLDER}/pre -name '*.sh' 2> /dev/null || true)
        for script in $scripts; do $script; done
      fi
      kubectl apply --kubeconfig $KUBECONFIG $APPLY_MODE

  - name: wait-until-pods-and-crds
    image: gcr.io/tekton-releases/dogfooding/ko-gcloud:latest
    script: |
      #!/usr/bin/env bash
      set -exo pipefail
      APPLICATION="tekton-${PROJECT_NAME}"
      if [ "${PROJECT_NAME}" == "pipeline" ]; then
        APPLICATION="${APPLICATION}s"
      fi
      # Wait for pods to be ready and CRDs to be established
      kubectl wait --for condition=ready --timeout=120s pods -l app.kubernetes.io/part-of=$APPLICATION -n ${NAMESPACE}
      kubectl wait --for condition=established --timeout=60s crd -l app.kubernetes.io/part-of=$APPLICATION


  - name: deploy-extra-manifest
    image: gcr.io/tekton-releases/dogfooding/ko-gcloud:latest
    script: |
      #!/usr/bin/env bash
      set -exo pipefail
      if [ "${POST_RELEASE_FILE}" != "" ]; then
          # Set up RELEASE_ROOT
          if [[ "${VERSION}" == "latest" ]]; then
            RELEASE_ROOT=$(resources.inputs.release-bucket.path)/${VERSION}
          else
            RELEASE_ROOT=$(resources.inputs.release-bucket.path)/previous/${VERSION}
          fi
          kubectl apply --kubeconfig $KUBECONFIG -f $RELEASE_ROOT/${POST_RELEASE_FILE}
      fi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: verify-tekton-release-github
spec:
  params:
  - name: projectName
    description: Name of the Tekton project to install e.g. pipeline, trigger, dashboard, experimental
    default: pipeline
  - name: version
    description: The vX.Y.Z version that we want to install (including `v`)
  resources:
    inputs:
      - name: release-bucket
        type: storage
  steps:

  - name: compare-github-vs-bucket
    image: gcr.io/tekton-releases/tests/test-runner
    env:
    - name: PROJECT_NAME
      value: $(params.projectName)
    - name: VERSION
      value: $(params.version)
    command:
    - /bin/sh
    args:
    - -ce
    - |
      curl -L https://github.com/tektoncd/${PROJECT_NAME}/releases/download/${VERSION}/release.yaml > /workspace/release-github.yaml
      diff \
        /workspace/release-github.yaml \
        $(resources.inputs.release-bucket.path)/${PROJECT_NAME}/previous/${VERSION}/release.yaml # Diff exists with 0 only if there is no difference
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup-tekton-release
spec:
  params:
  - name: projectName
    description: Name of the Tekton project to install e.g. pipeline, trigger, dashboard, experimental
    default: pipeline
  - name: namespace
    description: The namespace specified in the release. This does not enforce a namespace, it's used to verify that all pods are running in the specified namespace
    default: tekton-pipelines
  - name: version
    description: The vX.Y.Z version that we want to install (including `v`)
  - name: resources
    description: space separated list of resources to be deleted
  resources:
    inputs:
      - name: k8s-cluster
        type: cluster
      - name: plumbing-library
        type: git
  stepTemplate:
    env:
    - name: PROJECT_NAME
      value: $(params.projectName)
    - name: NAMESPACE
      value: $(params.namespace)
    - name: VERSION
      value: $(params.version)
    - name: RESOURCES
      value: $(params.resources)
  steps:

  - name: cleanup-resources
    image: gcr.io/tekton-releases/tests/test-runner
    command:
    - /bin/bash
    args:
    - -ce
    - |
      # Make sure that everything is cleaned up in the current namespace.
      for res in ${RESOURCES}; do
        kubectl delete --ignore-not-found=true ${res}.tekton.dev --all \
        --kubeconfig /workspace/$(resources.inputs.k8s-cluster.name)/kubeconfig
      done

  - name: uninstall-tekton-project
    image: gcr.io/tekton-releases/tests/test-runner
    env:
      - name: KUBECONFIG
        value: /workspace/$(resources.inputs.k8s-cluster.name)/kubeconfig
    command:
    - /bin/bash
    args:
    - -ce
    - |
      source $(resources.inputs.plumbing-library.path)/scripts/library.sh

      kubectl delete --ignore-not-found=true -f "https://github.com/tektoncd/${PROJECT_NAME}/releases/download/${VERSION}/release.yaml" \
      --kubeconfig /workspace/$(resources.inputs.k8s-cluster.name)/kubeconfig

      wait_until_object_does_not_exist namespace ${NAMESPACE}
