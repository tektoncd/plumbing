# Copyright 2019 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: install-tekton-release
spec:
  inputs:
    resources:
    - name: release-bucket
      type: storage
    - name: k8s-cluster
      type: cluster
    - name: plumbing-library
      type: git
    params:
    - name: projectName
      description: Name of the Tekton project to install e.g. pipeline, trigger, dashboard, experimental
      default: pipeline
    - name: namespace
      description: The namespace specified in the release. This does not enforce a namespace, it's used to verify that all pods are running in the specified namespace
      default: tekton-pipelines
    - name: version
      description: The vX.Y.Z version that we want to install (including `v`)
    - name: default-service-account
      description: Service account to be setup as default in Tekton configmap
      default: default
  steps:

  - name: make-pipeline-folder  # This is a hack to have a consistent folder structure
    image: busybox
    command:
    - /bin/sh
    args:
    - -ce
    - |
      if [ "$(inputs.params.projectName)" == "pipeline" ]; then
        mkdir -p "$(inputs.resources.release-bucket.path)/$(inputs.params.projectName)" || true
        ln -s $(inputs.resources.release-bucket.path)/previous $(inputs.resources.release-bucket.path)/$(inputs.params.projectName)/
      fi

  - name: deploy-tekton-project
    image: gcr.io/tekton-releases/tests/test-runner@sha256:a4a64b2b70f85a618bbbcc6c0b713b313b2e410504dee24c9f90ec6fe3ebf63f
    command:
    - /bin/bash
    args:
    - -ce
    - |
      kubectl apply \
      --filename $(inputs.resources.release-bucket.path)/$(inputs.params.projectName)/previous/$(inputs.params.version)/release.yaml \
      --kubeconfig /workspace/$(inputs.resources.k8s-cluster.name)/kubeconfig

  - name: setup-default-service-account
    image: gcr.io/tekton-releases/tests/test-runner@sha256:a4a64b2b70f85a618bbbcc6c0b713b313b2e410504dee24c9f90ec6fe3ebf63f
    command:
    - /bin/bash
    args:
    - -ce
    - |
      kubectl patch \
      cm/config-defaults -n "$(inputs.params.namespace)" \
      -p '{"data": {"default-service-account": "$(inputs.params.default-service-account)"}}'

      kubectl get pod -n "$(inputs.params.namespace)" -o name \
      -l app.kubernetes.io/name=tekton-pipelines | xargs kubectl delete -n "$(inputs.params.namespace)"

  - name: wait-until-pods-running
    image: gcr.io/tekton-releases/tests/test-runner@sha256:a4a64b2b70f85a618bbbcc6c0b713b313b2e410504dee24c9f90ec6fe3ebf63f
    command:
    - /bin/bash
    args:
    - -ce
    - |
      source $(inputs.resources.plumbing-library.path)/scripts/library.sh
      wait_until_pods_running "$(inputs.params.namespace)"
    env:
      - name: KUBECONFIG
        value: /workspace/$(inputs.resources.k8s-cluster.name)/kubeconfig
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: verify-tekton-release-github
spec:
  inputs:
    resources:
    - name: release-bucket
      type: storage
    params:
    - name: projectName
      description: Name of the Tekton project to install e.g. pipeline, trigger, dashboard, experimental
      default: pipeline
    - name: version
      description: The vX.Y.Z version that we want to install (including `v`)
  steps:

  - name: make-pipeline-folder  # This is a hack to have a consistent folder structure
    image: busybox
    command:
    - /bin/sh
    args:
    - -ce
    - |
      if [ "$(inputs.params.projectName)" == "pipeline" ]; then
        mkdir -p "$(inputs.resources.release-bucket.path)/$(inputs.params.projectName)" || true
        ln -s $(inputs.resources.release-bucket.path)/previous $(inputs.resources.release-bucket.path)/$(inputs.params.projectName)/
      fi

  - name: compare-github-vs-bucket
    image: gcr.io/tekton-releases/tests/test-runner@sha256:a4a64b2b70f85a618bbbcc6c0b713b313b2e410504dee24c9f90ec6fe3ebf63f
    command:
    - /bin/sh
    args:
    - -ce
    - |
      curl -L https://github.com/tektoncd/$(inputs.params.projectName)/releases/download/$(inputs.params.version)/release.yaml > /workspace/release-github.yaml
      diff \
        /workspace/release-github.yaml \
        $(inputs.resources.release-bucket.path)/$(inputs.params.projectName)/previous/$(inputs.params.version)/release.yaml # Diff exists with 0 only if there is no difference
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: cleanup-tekton-release
spec:
  inputs:
    resources:
    - name: k8s-cluster
      type: cluster
    - name: plumbing-library
      type: git
    params:
    - name: projectName
      description: Name of the Tekton project to install e.g. pipeline, trigger, dashboard, experimental
      default: pipeline
    - name: namespace
      description: The namespace specified in the release. This does not enforce a namespace, it's used to verify that all pods are running in the specified namespace
      default: tekton-pipelines
    - name: version
      description: The vX.Y.Z version that we want to install (including `v`)
    - name: resources
      description: space separated list of resources to be deleted
  steps:

  - name: cleanup-resources
    image: gcr.io/tekton-releases/tests/test-runner@sha256:a4a64b2b70f85a618bbbcc6c0b713b313b2e410504dee24c9f90ec6fe3ebf63f
    command:
    - /bin/bash
    args:
    - -ce
    - |
      # Make sure that everything is cleaned up in the current namespace.
      for res in $(inputs.params.resources); do
        kubectl delete --ignore-not-found=true ${res}.tekton.dev --all \
        --kubeconfig /workspace/$(inputs.resources.k8s-cluster.name)/kubeconfig
      done

  - name: uninstall-tekton-project
    image: gcr.io/tekton-releases/tests/test-runner@sha256:a4a64b2b70f85a618bbbcc6c0b713b313b2e410504dee24c9f90ec6fe3ebf63f
    env:
      - name: KUBECONFIG
        value: /workspace/$(inputs.resources.k8s-cluster.name)/kubeconfig
    command:
    - /bin/bash
    args:
    - -ce
    - |
      source $(inputs.resources.plumbing-library.path)/scripts/library.sh

      kubectl delete --ignore-not-found=true -f "https://github.com/tektoncd/$(inputs.params.projectName)/releases/download/$(inputs.params.version)/release.yaml" \
      --kubeconfig /workspace/$(inputs.resources.k8s-cluster.name)/kubeconfig

      wait_until_object_does_not_exist namespace $(inputs.params.namespace)
