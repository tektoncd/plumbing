# Copyright 2021 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: tekton-dashboard-nightly-test-ppc64le
spec:
  params:
  - name: containerRegistry
  - name: targetArch
  - name: namespace
  - name: remoteHost
  - name: remotePort
  - name: remoteUser
  - name: remoteSecret
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: tekton-dashboard-$(tt.params.targetArch)-nightly-run-
      namespace: $(tt.params.namespace)
    spec:
      timeout: 3h
      workspaces:
      # this workspace will be used to share info between tasks
      - name: shared-workspace
        volumeClaimTemplate:
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
      # this workspace will be used to store ssh key
      - name: ssh-secret
        secret:
          secretName: $(tt.params.remoteSecret)
          items:
          - key: privatekey
            path: id_rsa
            # yamllint disable rule:octal-values
            mode: 0600
            # yamllint enable
      pipelineSpec:
        workspaces:
        - name: shared-workspace
        - name: ssh-secret
        params:
        - name: container-registry
        - name: target-arch
        - name: remote-host
        - name: remote-port
        - name: remote-user
        tasks:
        - name: git-clone-dashboard
          taskRef:
            name: git-clone
            bundle: ghcr.io/tektoncd/catalog/upstream/tasks/git-clone:0.7
          params:
          - name: url
            value: https://github.com/tektoncd/dashboard
          - name: revision
            value: main
          - name: subdirectory
            value: src/github.com/tektoncd/dashboard
          workspaces:
          - name: output
            workspace: shared-workspace
            subPath: source-code
        - name: create-k8s-cluster
          runAfter: [git-clone-dashboard]
          taskRef:
            name: create-delete-k8s-cluster-$(tt.params.targetArch)
          workspaces:
          - name: k8s-shared
            workspace: shared-workspace
            subPath: k8s-shared
          - name: registry-shared
            workspace: shared-workspace
            subPath: registry-shared
          - name: ssh-secret
            workspace: ssh-secret
          params:
          - name: remote-host
            value: $(params.remote-host)
          - name: remote-port
            value: $(params.remote-port)
          - name: remote-user
            value: $(params.remote-user)
        - name: e2e-test-dashboard
          runAfter: [create-k8s-cluster]
          taskSpec:
            params:
            - name: container-registry
            - name: target-arch
            - name: remote-host
            workspaces:
            - name: k8s-shared
              description: workspace for k8s config, configuration file is expected to have `config` name
              mountPath: /root/.kube
            - name: registry-shared
              description: workspace for registry credentials & certificate, files are expected to have `config.json` & `cert.pem` name respectively
              mountPath: /root/.docker
            - name: source-code
              description: workspace with source code for tekton component
            steps:
            - name: run-e2e-tests
              image: gcr.io/tekton-releases/dogfooding/test-runner:latest
              workingDir: $(workspaces.source-code.path)/src/github.com/tektoncd/dashboard
              env:
              # Connect to the sidecar over TCP, with TLS.
              - name: DOCKER_HOST
                value: tcp://localhost:2376
              # Verify TLS.
              - name: DOCKER_TLS_VERIFY
                value: '1'
              # Use the certs generated by the sidecar daemon.
              - name: DOCKER_CERT_PATH
                value: /certs/client
              - name: GOPATH
                value: /workspace
              - name: KUBECONFIG
                value: $(workspaces.k8s-shared.path)/config
              - name: PLATFORM
                value: linux/$(params.target-arch)
              - name: KO_DOCKER_REPO
                value: $(params.container-registry)
              - name: REPO_ROOT_DIR
                value: $(workspaces.source-code.path)/src/github.com/tektoncd/dashboard
              - name: SKIP_INITIALIZE
                value: "true"
              - name: SKIP_BUILD_TEST
                value: "true"
              - name: E2E_VIDEO
                value: "false"
              - name: SSL_CERT_FILE
                value: $(workspaces.registry-shared.path)/cert.pem
              - name: USE_NIGHTLY_RELEASE
                value: "true"
              command:
              - /bin/bash
              args:
              - -ce
              - |
                ./test/presubmit-tests.sh --integration-tests
              volumeMounts:
              - mountPath: /certs/client
                name: dind-certs
            sidecars:
            - image: docker:dind
              name: server
              args:
                - --storage-driver=overlay2
                - --userland-proxy=false
                - --debug
              securityContext:
                privileged: true
              env:
              - name: DOCKER_TLS_CERTDIR
                value: /certs
              volumeMounts:
              - mountPath: /certs/client
                name: dind-certs
              readinessProbe:
                periodSeconds: 1
                exec:
                  command: ['ls', '/certs/client/ca.pem']
            volumes:
            - name: dind-certs
              emptyDir: {}
          params:
          - name: container-registry
            value: $(params.container-registry)
          - name: target-arch
            value: $(params.target-arch)
          - name: remote-host
            value: $(params.remote-host)
          workspaces:
          - name: k8s-shared
            workspace: shared-workspace
            subPath: k8s-shared
          - name: registry-shared
            workspace: shared-workspace
            subPath: registry-shared
          - name: source-code
            workspace: shared-workspace
            subPath: source-code
          retries: 2
        finally:
        - name: delete-k8s-cluster
          taskRef:
            name: create-delete-k8s-cluster-$(tt.params.targetArch)
          workspaces:
          - name: ssh-secret
            workspace: ssh-secret
          params:
          - name: remote-host
            value: $(params.remote-host)
          - name: remote-port
            value: $(params.remote-port)
          - name: remote-user
            value: $(params.remote-user)
          - name: action
            value: delete
      params:
      - name: container-registry
        value: $(tt.params.containerRegistry)
      - name: target-arch
        value: $(tt.params.targetArch)
      - name: remote-host
        value: $(tt.params.remoteHost)
      - name: remote-port
        value: $(tt.params.remotePort)
      - name: remote-user
        value: $(tt.params.remoteUser)
